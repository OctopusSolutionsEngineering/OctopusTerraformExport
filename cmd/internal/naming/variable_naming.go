package naming

import (
	"github.com/OctopusSolutionsEngineering/OctopusTerraformExport/cmd/internal/hash"
	"github.com/OctopusSolutionsEngineering/OctopusTerraformExport/cmd/internal/model/octopus"
	"github.com/OctopusSolutionsEngineering/OctopusTerraformExport/cmd/internal/sanitizer"
)

/*
The functions in this namespace are used to ensure consistency in the naming of variables, especially
sensitive variable. When the sensitive variable names are predictable, they can be generated by external
tools. Assume these names form a contract with external tools and should not be changed without careful
consideration.
*/

// VariableSecretName returns a unique name for the Terraform variable used to populate the
// Octopus sensitive variable. This name has to be unique to avoid conflicts and generated in
// a deterministic way to ensure that the same name is used when the export is run multiple times
// and also when the values are populated by external tools.
func VariableSecretName(variable octopus.Variable) string {
	return "variable_" + hash.Sha256Hash(variable.Id) + "_sensitive_value"
}

func VariableValueName(variable octopus.Variable) string {
	return "variable_" + hash.Sha256Hash(variable.Id) + "_value"
}

func TenantVariableValueName(tenantVariable octopus.TenantVariable) string {
	return "tenantvariable_" + hash.Sha256Hash(tenantVariable.Id) + "_value"
}

func TenantVariableSecretName(tenantVariable octopus.TenantVariable) string {
	return "tenantvariable_" + hash.Sha256Hash(tenantVariable.Id) + "_sensitive_value"
}

func DeploymentProcessPropertySecretName(named octopus.NamedResource, action octopus.Action, property string) string {
	return "action_" + hash.Sha256Hash(named.GetId()+"_"+action.Id+"_"+property) + "_sensitive_value"
}

func GitCredentialSecretName(gitCredentials octopus.GitCredentials) string {
	return "gitcredential_" + sanitizer.SanitizeName(gitCredentials.Name) + "_sensitive_value"
}

func CertificateDataName(certificate octopus.Certificate) string {
	return "certificate_" + sanitizer.SanitizeName(certificate.Name) + "_data"
}

func CertificatePasswordName(certificate octopus.Certificate) string {
	return "certificate_" + sanitizer.SanitizeName(certificate.Name) + "_password"
}

func FeedSecretName(resource octopus.Feed) string {
	return "feed_" + sanitizer.SanitizeName(resource.Name) + "_password"
}

func FeedSecretKeyName(resource octopus.Feed) string {
	return "feed_" + sanitizer.SanitizeName(resource.Name) + "_secretkey"
}

func StepTemplateParameterSecretName(template octopus.StepTemplate, parameter octopus.StepTemplateParameters) string {
	return "steptemplate_" + hash.Sha256Hash(template.Id+"_"+parameter.Id) + "_sensitive_value"
}

func MachineProxyPassword(machine octopus.MachineProxy) string {
	return "machine_proxy_" + sanitizer.SanitizeName(machine.Name) + "_password"
}
