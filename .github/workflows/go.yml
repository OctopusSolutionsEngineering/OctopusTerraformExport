# The following workflow provides an opinionated template you can customize for your own needs.
#
# If you are not an Octopus user, the "Push to Octopus", "Generate Octopus Deploy build information",
# and "Create Octopus Release" steps can be safely deleted.
#
# To configure Octopus, set the OCTOPUS_API_TOKEN secret to the Octopus API key, and
# set the OCTOPUS_SERVER_URL secret to the Octopus URL.
#
# Double check the "project" and "deploy_to" properties in the "Create Octopus Release" step
# match your Octopus projects and environments.
#
# Get a trial Octopus instance from https://octopus.com/start

permissions:
  id-token: write
  checks: write
  contents: write

name: Go Build
'on':
  workflow_dispatch: {}
  push: {}
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: '0'
      - uses: nelonoel/branch-name@v1.0.1
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.20
      - name: Install GitVersion
        uses: gittools/actions/gitversion/setup@v0.9.15
        with:
          versionSpec: 5.x
      - id: determine_version
        name: Determine Version
        uses: gittools/actions/gitversion/execute@v0.9.15
        with:
          additionalArguments: /overrideconfig mode=Mainline
      - name: Install Octopus Deploy CLI
        uses: OctopusDeploy/install-octopus-cli-action@v1
        with:
          version: latest
      - name: Install Dependencies
        run: go get ./...
        shell: bash
      - name: List Dependencies
        run: go list -u -m all > dependencies.txt
        shell: bash
      - name: Collect Dependencies
        uses: actions/upload-artifact@v3
        with:
          name: Dependencies
          path: dependencies.txt
      - name: List Dependency Updates
        run: go list -u -m -f "{{if .Update}}{{.}}{{end}}" all > dependencyUpdates.txt
        shell: bash
      - name: Collect Dependency Updates
        uses: actions/upload-artifact@v3
        with:
          name: Dependencies Updates
          path: dependencyUpdates.txt
      - name: Clone the Terraform provider source
        run: git clone https://github.com/OctopusDeployLabs/terraform-provider-octopusdeploy.git
        shell: bash
      - name: Build the Terraform provider from source
        run: go build -o terraform-provider-octopusdeploy
        working-directory: terraform-provider-octopusdeploy
      - name: Override the location used by Terraform provider
        run: |-
          cat <<EOT >> ~/.terraformrc
          provider_installation {
              dev_overrides {
              "octopusdeploylabs/octopusdeploy" = "${{ github.workspace }}/terraform-provider-octopusdeploy"
            }
            direct {}
          }
          EOT
      - name: Test
        run: |-
          go install gotest.tools/gotestsum@latest
          gotestsum --junitfile results.xml -- -v -coverprofile=coverage.out -coverpkg=github.com/mcasperson/OctopusTerraformExport/... -timeout 0 -json ./...
          go tool cover -html=coverage.out -o coverage.html
        shell: bash
        env:
          LICENSE: ${{ secrets.LICENSE }}
          ECR_ACCESS_KEY: ${{ secrets.ECR_ACCESS_KEY }}
          ECR_SECRET_KEY: ${{ secrets.ECR_SECRET_KEY }}
          GIT_CREDENTIAL: ${{ secrets.GIT_CREDENTIAL }}
          OCTOTESTSKIPINIT: true
          OCTODISABLEOCTOCONTAINERLOGGING: true
          OCTOTESTDUMPSTATE: true
          OCTOTESTDEFAULTSPACEID: Spaces-2
          GOMAXPROCS: 1
      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: coverage.html
      - if: always()
        name: Report
        uses: dorny/test-reporter@v1
        with:
          name: Go Tests
          path: results.xml
          reporter: java-junit
          fail-on-error: 'false'
      - run: go build -o octoterra_linux_amd64 cmd/octoterra.go
        env:
          GOOS: linux
          GOARCH: amd64
          CGO_ENABLED: 0
      - run: go build -o octoterra_windows_amd64.exe cmd/octoterra.go
        env:
          GOOS: windows
          GOARCH: amd64
          CGO_ENABLED: 0
      - run: go build -o octoterra_macos_amd64 cmd/octoterra.go
        env:
          GOOS: darwin
          GOARCH: amd64
          CGO_ENABLED: 0
      - run: go build -o octoterra_macos_arm64 cmd/octoterra.go
        env:
          GOOS: darwin
          GOARCH: arm64
          CGO_ENABLED: 0
      - name: Tag Release
        uses: mathieudutour/github-tag-action@v6.1
        with:
          custom_tag: ${{ steps.determine_version.outputs.semVer }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.determine_version.outputs.semVer }}+run${{ github.run_number }}-attempt${{ github.run_attempt }}
          files: |
            octoterra_linux_amd64
            octoterra_windows_amd64.exe
            octoterra_macos_amd64
            octoterra_macos_arm64
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push latest
        if: ${{ env.BRANCH_NAME == 'main' }}
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: octopussamples/octoterra:latest
      - name: Build and push versioned image
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: octopussamples/octoterra:${{ steps.determine_version.outputs.semVer }}
