{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, ids set to null to not filter by IDs, partial_name set to empty string to not filter by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_projects\" named \"example\" to provide information about existing Octopus Deploy projects with attributes: partial_name set to \"Test\" to filter by partial project name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_runbook\" named \"runbook\" to manage runbooks in Octopus Deploy with attributes: project_id set to the id of the first project from data.octopusdeploy_projects.example.projects, name set to \"Runbook\" as the unique name of the runbook, description set to \"Test Runbook\" as the description of the runbook, multi_tenancy_mode set to \"Untenanted\" to specify the tenanted deployment mode, connectivity_policy block with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\"; retention_policy block with quantity_to_keep set to 10 to specify how many runs to keep per environment; environment_scope set to \"Specified\" to determine how the runbook is scoped to environments; environments set to empty list as the list of environments the runbook can be run against; default_guided_failure_mode set to \"EnvironmentDefault\" to set the runbook guided failure mode; and force_package_download set to false to indicate whether to force packages to be re-downloaded.\n\nCreate a resource \"octopusdeploy_process\" named \"process_test_runbook\" to manage Runbook and Deployment Processes in Octopus Deploy with attributes: project_id set to the id of the first project from data.octopusdeploy_projects.example.projects, runbook_id set to the id of the octopusdeploy_runbook.runbook resource, and depends_on set to empty list.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_step_order_test_runbook\" to manage order of Steps of a Runbook or Deployment Process in Octopus Deploy with attributes: process_id set to the id of octopusdeploy_process.process_test_runbook, and steps set to a list containing the ids of octopusdeploy_process_step.process_step_test_runbook_hello_world__using_powershell_ and octopusdeploy_process_step.process_step_test_runbook_test.\n\nCreate a variable \"project_runbook_step_test_packageid\" of type string, not nullable, not sensitive, with description \"The package ID for the package named  from step Test in project Runbook\" and default value \"terraform\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_test_runbook_test\" to manage a single step of a Runbook or Deployment Process in Octopus Deploy with attributes: name set to \"Test\" as the name of the step, type set to \"Octopus.TerraformApply\" as the execution type of the step, process_id set to the id of octopusdeploy_process.process_test_runbook, channels set to null as the set of channels associated with this step, condition set to \"Success\" to specify when to run the step, environments set to null as the set of environments within which this step will run, excluded_environments set to null as the set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" to specify whether to run this step before or after package acquisition, primary_package set to an object with acquisition_location \"Server\", feed_id set to the id of the first feed from data.octopusdeploy_feeds.built_in_feed.feeds, id set to null, package_id set to the variable project_runbook_step_test_packageid, and properties set to a map with SelectionMode \"immediate\", slug set to \"test\" as the human-readable unique identifier for the step, start_trigger set to \"StartAfterPrevious\" to specify whether to run this step after the previous step, tenant_tags set to null as the set of tenant tags associated with this step, properties set to an empty map as a collection of process step properties, and execution_properties set to a map with keys and values specifying various step action properties including \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\", \"Octopus.Action.Script.ScriptSource\" = \"Package\", \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\", \"Octopus.Action.RunOnServer\" = \"True\", \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\", \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\", \"Octopus.Action.Terraform.AzureAccount"},{"role":"assistant","content":"data \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_projects\" \"example\" {\n  partial_name           = \"Test\"\n  skip                   = 0\n  take                   = 1\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = data.octopusdeploy_projects.example.projects[0].id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = []\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_runbook\" {\n  project_id = \"${data.octopusdeploy_projects.example.projects[0].id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_runbook\" {\n  process_id = \"${octopusdeploy_process.process_test_runbook.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test_runbook_hello_world__using_powershell_.id}\", \"${octopusdeploy_process_step.process_step_test_runbook_test.id}\"]\n}\n\nvariable \"project_runbook_step_test_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named  from step Test in project Runbook\"\n  default     = \"terraform\"\n}\nresource \"octopusdeploy_process_step\" \"process_step_test_runbook_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_runbook.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"${var.project_runbook_step_test_packageid}\",\n    properties = {\n      SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n  }\n}\n\nvariable \"project_runbook_step_hello_world__using_powershell__package_package1_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named package1 from step Hello world (using PowerShell) in project Runbook\"\n  default     = \"package1\"\n}\nresource \"octopusdeploy_process_step\" \"process_step_test_runbook_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_runbook.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = []\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n      id = null,\n      package_id = \"${var.project_runbook_step_hello_world__using_powershell__package_package1_packageid}\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.EnabledFeatures\" = \"Octopus.Features.JsonConfigurationVariables\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group with attributes: name set to \"Test\" representing the name of this resource, and description set to \"Test Description\" representing the description of this project group."},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_environments\" named \"test\" to provide information about existing environments with attributes: ids set to an empty list to filter by no specific IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_environments\" named \"dev\" to provide information about existing environments with attributes: ids set to an empty list to filter by no specific IDs, partial_name set to \"Development\" to filter by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"once_daily_example\" to manage a scheduled trigger for a project in Octopus Deploy with attributes: name set to \"Once Daily example\" as the name of this resource, description set to \"This is a once daily schedule\" as a description of the trigger, project_id set to the ID of the project this trigger attaches to, space_id set to the space ID where this trigger's project exists; with a deploy_new_release_action block configuring deployment of a new release with destination_environment_id set to the ID of the \"test\" environment; and a once_daily_schedule block defining the daily schedule with start_time set to \"2024-03-22T09:00:00\" as the time of day to start the trigger, and days_of_week set to [\"Tuesday\", \"Wednesday\", \"Monday\"] as the days of the week to run the trigger.\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"continuous_example\" to manage a scheduled trigger for a project with attributes: name set to \"Continuous\", description set to \"This is a continuous daily schedule\", project_id set to the project ID, space_id set to the space ID; with a deploy_new_release_action block setting destination_environment_id to the \"test\" environment ID; and a continuous_daily_schedule block defining the daily schedule with interval set to \"OnceHourly\" as the interval in minutes to run the trigger, hour_interval set to 3 as how often to run the trigger in hours, run_after set to \"2024-03-22T09:00:00\" as the time of day to start the trigger, run_until set to \"2024-03-29T13:00:00\" as the time of day to end the trigger, and days_of_week set to [\"Monday\", \"Tuesday\", \"Friday\"].\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"deploy_latest_example\" to manage a scheduled trigger with attributes: name set to \"Deploy Latest\", project_id set to the project ID, space_id set to the space ID; with a deploy_latest_release_action block configuring deployment of the latest release with source_environment_id set to the \"dev\" environment ID, destination_environment_id set to the \"test\" environment ID, and should_redeploy set to true to enable redeployment even if targets are up-to-date; and a cron_expression_schedule block with cron_expression set to \"0 0 06 * * Mon-Fri\" as the cron expression for the schedule.\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"deploy_new_example\" with attributes: name set to \"Deploy New\", project_id set to the project ID, space_id set to the space ID; with a deploy_new_release_action block setting destination_environment_id to the \"test\" environment ID; and a cron_expression_schedule block with cron_expression set to \"0 0 06 * * Mon-Fri\".\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"date_of_month\" with attributes: name set to \"Date Of Month\", project_id set to the project ID, space_id set to the space ID; with a deploy_new_release_action block setting destination_environment_id to the \"test\" environment ID; and a days_per_month_schedule block with monthly_schedule_type set to \"DateOfMonth\" as the type of monthly schedule, start_time set to \"2024-03-22T09:00:00\", date_of_month set to \"1\" as the date of the month to run the trigger, day_number_of_month set to \"1\" as the ordinal day of the week to run the trigger, and day_of_week set to \"Monday\".\n\nCreate a resource \"octopusdeploy_project_scheduled_trigger\" named \"day_of_month\" with attributes: name set to \"Day Of Month\", project_id set to the project ID, space_id set to the space ID; with a deploy_new_release_action block setting destination_environment_id to the \"test\" environment ID; and a days_per_month_schedule block with monthly_schedule_type set to \"DayOfMonth\", start_time set to \"2024-03-22T09:00:00\", date_of_month set to \"1\","},{"role":"assistant","content":"data \"octopusdeploy_environments\" \"test\" {\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"dev\" {\n  ids          = []\n  partial_name = \"Development\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"once_daily_example\" {\n  name        = \"Once Daily example\"\n  description = \"This is a once daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  once_daily_schedule {\n    start_time   = \"2024-03-22T09:00:00\"\n    days_of_week = [\"Tuesday\", \"Wednesday\", \"Monday\"]\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"continuous_example\" {\n  name        = \"Continuous\"\n  description = \"This is a continuous daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  continuous_daily_schedule {\n    interval      = \"OnceHourly\"\n    hour_interval = 3\n    run_after     = \"2024-03-22T09:00:00\"\n    run_until     = \"2024-03-29T13:00:00\"\n    days_of_week  = [\"Monday\", \"Tuesday\", \"Friday\"]\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"deploy_latest_example\" {\n  name       = \"Deploy Latest\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_latest_release_action {\n    source_environment_id      = data.octopusdeploy_environments.dev.environments[0].id\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n    should_redeploy            = true\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"deploy_new_example\" {\n  name       = \"Deploy New\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"date_of_month\" {\n  name       = \"Date Of Month\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  days_per_month_schedule {\n    monthly_schedule_type  = \"DateOfMonth\"\n    start_time = \"2024-03-22T09:00:00\"\n    date_of_month = \"1\"\n    day_number_of_month = \"1\"\n    day_of_week = \"Monday\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"day_of_month\" {\n  name       = \"Day Of Month\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  days_per_month_schedule {\n    monthly_schedule_type  = \"DayOfMonth\"\n    start_time = \"2024-03-22T09:00:00\"\n    date_of_month = \"1\"\n    day_number_of_month = \"1\"\n    day_of_week = \"Monday\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"runbook_example\" {\n  name        = \"Runbook\"\n  description = \"This is a Cron schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  run_runbook_action {\n    target_environment_ids = [data.octopusdeploy_environments.test.environments[0].id, data.octopusdeploy_environments.dev.environments[0].id]\n    runbook_id             = octopusdeploy_runbook.runbook.id\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"timezone_example\" {\n  name        = \"Time Zone Example\"\n  description = \"This is a continuous daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  timezone = \"E. Australia Standard Time\"\n  deploy_new_release_action {\n    destination_environment_id = data.octopusdeploy_environments.test.environments[0].id\n  }\n  continuous_daily_schedule {\n    interval      = \"OnceHourly\"\n    hour_interval = 3\n    run_after     = \"2024-03-22T09:00:00\"\n    run_until     = \"2024-03-29T13:00:00\"\n    days_of_week  = [\"Monday\", \"Tuesday\", \"Friday\"]\n  }\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"docker_feed\" {\n  feed_type    = \"Docker\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${data.octopusdeploy_feeds.docker_feed.feeds[0].id}\",\n      id = null,\n      package_id = \"package1\",\n      properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n  }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [data.octopusdeploy_environments.dev.environments[0].id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_listening_tentacle_deployment_target\" named \"target_vm_listening_ngrok\" to manage listening tentacle deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the \"development_environment\" environment as a list of environment IDs associated with this listening tentacle, name set to \"Test\" as the name of this resource, roles set to [\"vm\"] as a list of role IDs associated with this deployment target, tentacle_url set to \"https://tentacle/\" as the tenant URL of this deployment target, thumbprint set to \"55E05FD1B0F76E60F6DA103988056CE695685FD1\" as the thumbprint of this deployment target, is_disabled set to false representing the disabled status, is_in_process set to false representing the in-process status, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source as the machine policy ID associated with this deployment target, shell_name set to \"Unknown\" as the shell name associated with this deployment target, shell_version set to \"Unknown\" as the shell version associated with this deployment target, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this resource. Include an empty tentacle_version_details block."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_listening_tentacle_deployment_target\" \"target_vm_listening_ngrok\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"https://tentacle/\"\n  thumbprint                        = \"55E05FD1B0F76E60F6DA103988056CE695685FD1\"\n  is_disabled                       = false\n  is_in_process                     = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_azure_subscription_account\" named \"account_subscription\" to manage Azure subscription accounts in Octopus Deploy with attributes: description set to \"A test account\" to describe this Azure subscription account, name set to \"Subscription\" as the name of this resource, environments set to null for no associated environment IDs, tenant_tags set to an empty list for no tenant tags, tenants set to null for no tenant IDs, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, storage_endpoint_suffix set to \"storage_endpoint_suffix\" as the storage endpoint suffix associated with this Azure subscription account, subscription_id set to \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\" as the subscription ID of this resource, azure_environment set to \"AzureCloud\" as the Azure environment associated with this resource, management_endpoint set to \"management_endpoint\" (attribute not in schema but included), and certificate set to the contents of the file \"dummycert.txt\"."},{"role":"assistant","content":"resource \"octopusdeploy_azure_subscription_account\" \"account_subscription\" {\n  description                       = \"A test account\"\n  name                              = \"Subscription\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  storage_endpoint_suffix           = \"storage_endpoint_suffix\"\n  subscription_id                   = \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\"\n  azure_environment                 = \"AzureCloud\"\n  management_endpoint               = \"management_endpoint\"\n  certificate                       = file(\"dummycert.txt\")\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_git_credential\" named \"gitcredential_test\" to manage a Git credential in Octopus Deploy with attributes: description set to \"test git credential\" as the description of this Git Credential, name set to \"test\" as the name of this Git Credential, type set to \"UsernamePassword\" as the Git credential authentication type, username set to \"admin\" as the username for the Git credential, and password set to the sensitive variable \"gitcredential_test\" as the password for the Git credential.\n\nCreate a variable \"gitcredential_test\" of type string, non-nullable, sensitive, with description \"The secret variable value associated with the git credential test\" and default value \"Password01!\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the first lifecycle ID from the \"lifecycle_default_lifecycle\" data source, name set to \"Test\" as the name of this resource, project_group_id set to the ID of \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, included_library_variable_sets set to an empty list, and nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of \"deploy_frontend_project\" as the owner ID, type set to \"String\" as the type of variable, name set to \"Test\" as the name of this resource, and value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage Runbook and Deployment Processes in Octopus Deploy with attribute: project_id set to the ID of \"deploy_frontend_project\" as the ID of the project this process belongs to.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of Steps of a Runbook or Deployment Process in Octopus Deploy with attributes: process_id set to the ID of \"test\" process as the ID of the process steps belongs to, and steps set to a list containing the ID of \"process_step_get_mysql_host\" step as the steps in the order of execution.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a Runbook or Deployment Process in Octopus Deploy with attributes: name set to \"step1\" as the name of this resource, type set to \"Octopus.KubernetesRunScript\" as the execution type of the step, process_id set to the ID of \"test\" process as the ID of the process this step belongs to, channels set to null as a set of channels associated with this step, condition set to \"Success\" as when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" as whether to run this step before or after package acquisition, slug set to \"step1\" as the human-readable unique identifier for the step, start_trigger set to \"StartAfterPrevious\""},{"role":"assistant","content":"resource \"octopusdeploy_git_credential\" \"gitcredential_test\" {\n  description = \"test git credential\"\n  name        = \"test\"\n  type        = \"UsernamePassword\"\n  username    = \"admin\"\n  password    = \"${var.gitcredential_test}\"\n}\nvariable \"gitcredential_test\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret variable value associated with the git credential test\"\n  default     = \"Password01!\"\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"step1\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"step1\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  git_dependencies = {\n    \"\" = {\n      repository_uri = \"https://github.com/OctopusDeploy/OctopusClients.git\"\n      git_credential_type = \"Library\"\n      git_credential_id = octopusdeploy_git_credential.gitcredential_test.id\n      default_branch = \"main\"\n    }\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_ssh_connection_worker\" named \"optionals\" to manage a SSH connection worker in Octopus Deploy with attributes: name set to \"SSH Worker\" as the name of this resource, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source to select the machine policy, worker_pool_ids set to a list containing the ID of the \"workerpool_docker\" static worker pool to select at least one worker pool for the worker, account_id set to the ID of the \"ssh_account\" username-password account as the connection account, host set to \"hostname\" as the hostname or IP address of the deployment target to connect to, port set to 22 as the port number of the host to connect to, fingerprint set to \"SHA256: 12345abc\" as the host fingerprint to be verified, dotnet_platform set to \"linux-x64\" as the NET Core platform of self-contained version of Calamari, proxy_id set to null to specify the connection type for the Tentacle as direct, and is_disabled set to true to disable the worker from being included in any deployments.\n\nCreate a resource \"octopusdeploy_username_password_account\" named \"ssh_account\" to manage username-password accounts in Octopus Deploy with attributes: description set to \"A test account\" as the description of this username/password account, name set to \"GKE\" as the name of the username-password account, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, username set to \"admin\" as the username associated with this resource, and password set to \"secretgoeshere\" as the password associated with this resource.\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, description set to \"A test worker pool\" as the description of this static worker pool, is_default set to false, and sort_order set to 3 as the order number to sort a dynamic worker pool."},{"role":"assistant","content":"data \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_ssh_connection_worker\" \"optionals\" {\n  name              = \"SSH Worker\"\n  machine_policy_id = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  worker_pool_ids = [octopusdeploy_static_worker_pool.workerpool_docker.id]\n  account_id        = octopusdeploy_username_password_account.ssh_account.id\n  host              = \"hostname\"\n  port              = 22\n  fingerprint       = \"SHA256: 12345abc\"\n  dotnet_platform   = \"linux-x64\"\n  proxy_id          = null\n  is_disabled       = true\n}\nresource \"octopusdeploy_username_password_account\" \"ssh_account\" {\n  description                       = \"A test account\"\n  name                              = \"GKE\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  username                          = \"admin\"\n  password                          = \"secretgoeshere\"\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_channel\" named \"backend_mainline\" to manage channels in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, project_id set to the ID of the project resource \"deploy_frontend_project\" as the project ID associated with this channel, description set to \"Test channel\" as the description of this channel, and is_default set to true indicating this is the default channel for the associated project. It depends on the resources \"deploy_frontend_project\" and \"test\" process steps order.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a resource \"octopusdeploy_git_trigger\" named \"my_trigger\" to manage Git triggers in Octopus Deploy with attributes: name set to \"My Git trigger\" as the name of this resource, description set to \"My Git trigger description\" as the description of this Git trigger, project_id set to the ID of the project resource \"deploy_frontend_project\" as the ID of the project to attach the trigger, and channel_id set to the ID of the channel resource \"backend_mainline\" as the ID of the channel in which the release will be created. The sources attribute is a list containing one object with deployment_action_slug set to \"step1\", git_dependency_name set to an empty string, include_file_paths set to [\"include/me\", \"include/this/too\"], and exclude_file_paths set to [\"exclude/me\", \"exclude/this/too\"].\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true indicating dynamic infrastructure is allowed, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false indicating guided failure is not used. The \"development_environment\" includes nested blocks jira_extension_settings with environment_type set to \"unmapped\", jira_service_management_extension_settings with is_enabled set to true, and servicenow_extension_settings with is_enabled set to true.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project resource \"deploy_frontend_project\" as the owner ID of this variable, type set to \"String\" as the type of variable, name set to \"Test\" as the name of this resource, and value set to \"PlainText\" as the value of this variable.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group resource \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\", space_id set to the variable \"octopus_space_id\", and included_library_variable_sets set to an empty list. The versioning_strategy block has template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_channel\" \"backend_mainline\" {\n  name        = \"Test\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  description = \"Test channel\"\n  depends_on  = [octopusdeploy_project.deploy_frontend_project, octopusdeploy_process_steps_order.test]\n  is_default  = true\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_git_trigger\" \"my_trigger\" {\n  name                = \"My Git trigger\"\n  description         = \"My Git trigger description\"\n  project_id          = octopusdeploy_project.deploy_frontend_project.id\n  channel_id          = octopusdeploy_channel.backend_mainline.id\n  sources = [{\n    deployment_action_slug = \"step1\"\n    git_dependency_name    = \"\"\n    include_file_paths     = [\n      \"include/me\",\n      \"include/this/too\"\n    ]\n    exclude_file_paths     = [\n      \"exclude/me\",\n      \"exclude/this/too\"\n    ]\n  }]\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_git_credential\" \"gitcredential_test\" {\n  description = \"test git credential\"\n  name        = \"test\"\n  type        = \"UsernamePassword\"\n  username    = \"admin\"\n  password    = \"${var.gitcredential_test}\"\n}\nvariable \"gitcredential_test\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret variable value associated with the git credential test\"\n  default     = \"Password01!\"\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"step1\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\",\n      id = null, package_id = \"package1\",\n      properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n  }\n  slug                  = \"step1\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  git_dependencies = {\n    \"\" = {\n      repository_uri = \"https://github.com/OctopusDeploy/OctopusClients.git\"\n      git_credential_type = \"Library\"\n      git_credential_id = octopusdeploy_git_credential.gitcredential_test.id\n      default_branch = \"main\"\n    }\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, description set to \"A test worker pool\" as the description of this static worker pool, is_default set to false, and sort_order set to 3 as the order number to sort a dynamic worker pool.\n\nCreate a resource \"octopusdeploy_kubernetes_agent_worker\" named \"optionals\" to manage Kubernetes agent workers in Octopus Deploy with attributes: name set to \"K8s Worker\" as the name of this resource, worker_pool_ids set to a list containing the ID of the \"workerpool_docker\" static worker pool specifying the pools in which this worker belongs, thumbprint set to \"96203ED84246201C26A2F4360D7CBC36AC1D232D\" as the thumbprint of the Kubernetes agent's certificate used by server to verify the identity of the agent, uri set to \"poll://kcxzcv2fpsxkn6tk9u6d/\" as the URI of the Kubernetes agent's used by the server to queue messages, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source as the optional ID of the machine policy that the Kubernetes agent will use, upgrade_locked set to true to prevent the Kubernetes agent from automatically upgrading, and is_disabled set to true to disable the Kubernetes agent so it will not be included in any deployments."},{"role":"assistant","content":"data \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_kubernetes_agent_worker\" \"optionals\" {\n  name         = \"K8s Worker\"\n  worker_pool_ids = [octopusdeploy_static_worker_pool.workerpool_docker.id]\n  thumbprint   = \"96203ED84246201C26A2F4360D7CBC36AC1D232D\"\n  uri          = \"poll://kcxzcv2fpsxkn6tk9u6d/\"\n  machine_policy_id = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  upgrade_locked    = true\n  is_disabled       = true\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_azure_openid_connect\" named \"example\" to manage Azure OpenID Connect accounts in Octopus Deploy with attributes: application_id set to \"10000000-0000-0000-0000-000000000000\" representing the application ID of this resource, name set to \"Azure OIDC\" representing the name of this resource, description set to \"A test account\" describing this Azure OpenID Connect account, subscription_id set to \"20000000-0000-0000-0000-000000000000\" representing the subscription ID of this resource, tenant_id set to \"30000000-0000-0000-0000-000000000000\" representing the tenant ID of this resource, execution_subject_keys set to [\"space\"] specifying keys to include in a deployment or runbook, health_subject_keys set to [\"space\"] specifying keys to include in a health check, account_test_subject_keys set to [\"space\"] specifying keys to include in an account test, and audience set to \"api://AzureADTokenExchange\" representing the federated credentials audience used to establish a connection between external workload identities and Microsoft Entra ID."},{"role":"assistant","content":"resource \"octopusdeploy_azure_openid_connect\" \"example\" {\n  application_id  = \"10000000-0000-0000-0000-000000000000\"\n  name            = \"Azure OIDC\"\n  description = \"A test account\"\n  subscription_id = \"20000000-0000-0000-0000-000000000000\"\n  tenant_id       = \"30000000-0000-0000-0000-000000000000\"\n  execution_subject_keys = [\"space\"]\n  health_subject_keys = [\"space\"]\n  account_test_subject_keys = [\"space\"]\n  audience = \"api://AzureADTokenExchange\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false. For \"development_environment\", include jira_extension_settings with environment_type set to \"unmapped\" to provide extension settings for the Jira integration, jira_service_management_extension_settings with is_enabled set to true to enable Jira Service Management integration, and servicenow_extension_settings with is_enabled set to true to enable ServiceNow integration.\n\nCreate a resource \"octopusdeploy_tag_set\" named \"tagset_tag1\" to manage tag sets in Octopus Deploy with attributes: name set to \"tag1\" as the name of this resource, description set to \"Test tagset\" as the description of this tag set, and sort_order set to 0 as the sort order associated with this resource.\n\nCreate two resources \"octopusdeploy_tag\" named \"tag_a\" and \"tag_b\" to manage tags in Octopus Deploy with attributes: name set to \"a\" and \"b\" respectively as the name of the tag, color set to \"#333333\" as the color of the tag, description set to \"tag a\" and \"tag b\" respectively as the description of the tag, sort_order set to 2 and 3 respectively as the sort order of the tag, and tag_set_id set to the ID of \"octopusdeploy_tag_set.tagset_tag1\" as the ID of the associated tag set.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_cloud_region_deployment_target\" named \"target_region1\" to manage cloud region deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of \"octopusdeploy_environment.development_environment\" as a list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"cloud\"] as a list of roles associated with this resource, default_worker_pool_id set to an empty string, health_status set to \"Healthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the first machine policy from \"data.octopusdeploy_machine_policies.default_machine_policy\" as the machine policy ID associated with this resource, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this resource, and thumbprint set to an empty string.\n\nCreate three resources \"octopusdeploy_library_variable_set\" named \"octopus_library_variable_set\", \"octopus_library_variable_set2\", and \"octopus_library_variable_set3\" to manage library variable sets in Octopus Deploy with attributes: name set respectively to \"Test\", \"Test2\", and \"Test3\" as the name of this resource, and description set respectively to \"Test variable set\" as the description of this library variable set.\n\nCreate three resources \"octopusdeploy_variable\" named \"octopus_admin_api_key\", \"secret\", and \"secret_tag_scoped\" to manage variables in Octopus Deploy with attributes:\n\n- For \"octopus_admin_api_key\": name set to \"Test.Variable\" as the name of this resource, type set to \"String\" as the type of variable, description set to \"Test variable\" as the description of this variable, is_sensitive set to false indicating this variable is not sensitive, is_editable set to true indicating this variable is editable, owner_id set to the ID of \"octopusdeploy_library_variable_set.octopus_library_variable_set\" as the space ID associated with this variable, and value set to \"True\". Include a prompt block with description set to \"test description\" as the description of this variable prompt option, label set to \"test label\" as the label shown beside the parameter, is_required set to true indicating the prompt is required, and display_settings with control_type set to \"Select\" as the type of control for rendering this prompted variable, and a select_option with display_name set to \"hi\" as the display name for"},{"role":"assistant","content":"resource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_cloud_region_deployment_target\" \"target_region1\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"cloud\"]\n  default_worker_pool_id            = \"\"\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n}\nresource \"octopusdeploy_library_variable_set\" \"octopus_library_variable_set\" {\n  name = \"Test\"\n  description = \"Test variable set\"\n}\n\nresource \"octopusdeploy_variable\" \"octopus_admin_api_key\" {\n  name = \"Test.Variable\"\n  type = \"String\"\n  description = \"Test variable\"\n  is_sensitive = false\n  is_editable = true\n  owner_id = octopusdeploy_library_variable_set.octopus_library_variable_set.id\n  value = \"True\"\n\n  prompt {\n    description = \"test description\"\n    label       = \"test label\"\n    is_required = true\n    display_settings {\n      control_type = \"Select\"\n      select_option {\n        display_name = \"hi\"\n        value = \"there\"\n      }\n    }\n  }\n}\n\nresource \"octopusdeploy_variable\" \"secret\" {\n  name = \"Test.SecretVariable\"\n  type = \"Sensitive\"\n  description = \"Test variable\"\n  is_sensitive = true\n  is_editable = true\n  owner_id = octopusdeploy_library_variable_set.octopus_library_variable_set.id\n  sensitive_value = \"True\"\n\n  scope {\n    roles = [\"test\"]\n    environments = [\n      octopusdeploy_environment.production_environment.id,\n      octopusdeploy_environment.test_environment.id,\n      octopusdeploy_environment.development_environment.id]\n    machines = [octopusdeploy_cloud_region_deployment_target.target_region1.id]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"secret_tag_scoped\" {\n  depends_on = [octopusdeploy_tag.tag_a]\n\n  name         = \"Test.TagScopedVariable\"\n  type         = \"String\"\n  description  = \"Test variable\"\n  is_sensitive = false\n  is_editable  = true\n  owner_id     = octopusdeploy_library_variable_set.octopus_library_variable_set.id\n  value        = \"True\"\n\n  scope {\n    roles = [\"test\"]\n    environments = [\n      octopusdeploy_environment.production_environment.id,\n      octopusdeploy_environment.test_environment.id,\n      octopusdeploy_environment.development_environment.id]\n    machines = [octopusdeploy_cloud_region_deployment_target.target_region1.id]\n  }\n}\n\nresource \"octopusdeploy_library_variable_set\" \"octopus_library_variable_set2\" {\n  name = \"Test2\"\n  description = \"Test variable set\"\n}\n\nresource \"octopusdeploy_library_variable_set\" \"octopus_library_variable_set3\" {\n  name = \"Test3\"\n  description = \"Test variable set\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate 100 instances of resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" indicating the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test ${count.index + 1}\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the id of the first lifecycle from the data source \"lifecycle_default_lifecycle\", name set to \"Test ${count.index + 1}\" as the name of this resource, project_group_id set to the id of the project group \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\" indicating the tenanted deployment mode, space_id set to var.octopus_space_id, included_library_variable_sets set to an empty list, versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy block with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate 100 instances of resource \"octopusdeploy_process\" named \"test\" to manage Runbook and Deployment Processes in Octopus Deploy with attribute project_id set to the id of the corresponding \"deploy_frontend_project\" instance.\n\nCreate 100 instances of resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of Steps of a Runbook or Deployment Process in Octopus Deploy with attributes: process_id set to the id of the corresponding \"octopusdeploy_process.test\" instance, and steps set to a list containing the id of the corresponding \"octopusdeploy_process_step.process_step_get_mysql_host\" instance.\n\nCreate 100 instances of resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a Runbook or Deployment Process in Octopus Deploy with attributes: name set to \"Get MySQL Host\" as the name of this resource, type set to \"Octopus.KubernetesRunScript\" as the execution type of the step, process_id set to the id of the corresponding \"octopusdeploy_process.test\" instance, channels set to null as a set of channels associated with this step, condition set to \"Success\" indicating when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" indicating whether to run this step before or after package acquisition, packages set to a map with key \"package1\" containing acquisition_location set to \"ExecutionTarget\", feed_id set to the id of \"octopusdeploy_docker_container_registry.feed_docker\", id set to null, package_id set to \"package1\", and properties set to a map with Extract set to \"False\", Purpose set to an empty string, and SelectionMode set to \"immediate\", slug set to \"get-mysql-host\" as the human-readable unique identifier for the step, start_trigger set to \"StartAfterPrevious\" indicating whether to run this step after the previous step, tenant_tags set to null as a set of tenant tags associated with this step, execution_properties set to a map with \"Octopus.Action"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  count = 100\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project ${count.index + 1}\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test ${count.index + 1}\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  count = 100\n  project_id = \"${octopusdeploy_project.deploy_frontend_project[count.index].id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  count = 100\n  process_id = \"${octopusdeploy_process.test[count.index].id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host[count.index].id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  count = 100\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test[count.index].id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = { package1 = { acquisition_location = \"ExecutionTarget\", feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\", id = null, package_id = \"package1\", properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" } } }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to not filter by lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to not filter by IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate data sources \"octopusdeploy_feeds\" named \"helm\", \"docker\", \"github\", \"maven\", and \"nuget\" to provide information about existing feeds with attributes: feed_type set respectively to \"Helm\", \"Docker\", \"GitHub\", \"Maven\", and \"NuGet\" to filter by feed type, ids set to empty list to not filter by IDs, partial_name set to the feed type name to filter by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" to filter by name, ids set to null to not filter by IDs, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage a project in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project\" as the project description, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false (same as discrete_channel_release), is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the \"lifecycle_default_lifecycle\" data source, name set to \"Test\" as the project name, project_group_id set to the ID of the project group from the \"project_group\" data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to empty list to include no library variable sets, versioning_strategy block with template attribute set to a version template string, and connectivity_policy block with attributes: allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to skip unavailable machines.\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage a deployment process in Octopus Deploy with attribute: project_id set to the ID of the \"project_1\" resource.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of steps of a deployment process with attributes: process_id set to the ID of the \"test\" process resource, and steps set to a list containing the ID of the \"process_step_get_mysql_host\" process step resource.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a deployment process with attributes: name set to \"Get MySQL Host\" as the step name, type set to \"Octopus.KubernetesRunScript\" as the execution type, process_id set to the ID of the \"test\" process resource, channels set to null to not associate channels, condition set to \"Success\" to run the step on success, environments set to null to not restrict environments, excluded_environments set to null to not exclude environments, worker_pool_id set to the ID of the worker pool from the \"workerpool_default\" data source, package_requirement set to \"LetOctopusDecide\" to let Octopus decide package acquisition timing, slug set to \"get-mysql-host\" as the human-readable unique identifier, start_trigger set to \"StartAfterPrevious\" to run after the previous step, tenant_tags set to null to not associate tenant tags, packages map with keys \"package1\" to \"package5\" each defining package references with attributes: package_id set to the package name, acquisition_location set to \"Server\" to acquire from server, extract_during_deployment set to false to not extract during deployment, feed_id set"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"helm\" {\n  feed_type    = \"Helm\"\n  ids          = []\n  partial_name = \"Helm\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"docker\" {\n  feed_type    = \"Docker\"\n  ids          = []\n  partial_name = \"Docker\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"github\" {\n  feed_type    = \"GitHub\"\n  ids          = []\n  partial_name = \"GitHub\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"maven\" {\n  feed_type    = \"Maven\"\n  ids          = []\n  partial_name = \"Maven\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"nuget\" {\n  feed_type    = \"NuGet\"\n  ids          = []\n  partial_name = \"NuGet\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.project_1.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  worker_pool_id                     = data.octopusdeploy_worker_pools.workerpool_default.worker_pools[0].id\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  packages = {\n    \"package1\" = {\n      package_id                = \"package1\"\n      acquisition_location      = \"Server\"\n      extract_during_deployment = false\n      feed_id                   = data.octopusdeploy_feeds.docker.feeds[0].id\n      properties                = { Extract = \"True\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n\n    \"package2\" = {\n      package_id                = \"package2\"\n      acquisition_location      = \"Server\"\n      extract_during_deployment = false\n      feed_id                   = data.octopusdeploy_feeds.helm.feeds[0].id\n      properties                = { Extract = \"True\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n\n    \"package3\" = {\n      package_id                = \"package3\"\n      acquisition_location      = \"Server\"\n      extract_during_deployment = false\n      feed_id                   = data.octopusdeploy_feeds.maven.feeds[0].id\n      properties                = { Extract = \"True\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n\n    \"package4\" = {\n      package_id                = \"package4\"\n      acquisition_location      = \"Server\"\n      extract_during_deployment = false\n      feed_id                   = data.octopusdeploy_feeds.nuget.feeds[0].id\n      properties                = { Extract = \"True\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n\n    \"package5\" = {\n      name                      = \"package5\"\n      package_id                = \"package5\"\n      acquisition_location      = \"Server\"\n      extract_during_deployment = false\n      feed_id                   = data.octopusdeploy_feeds.github.feeds[0].id\n      properties                = { Extract = \"True\", Purpose = \"\", SelectionMode = \"immediate\" }\n    }\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate multiple resources \"octopusdeploy_project_scheduled_trigger\" to manage scheduled triggers for a project in Octopus Deploy:\n\n- \"once_daily_example\" with attributes: name \"Once Daily example\", description \"This is a once daily schedule\", project_id referencing the project, space_id from variable, and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a once_daily_schedule block with start_time \"2024-03-22T09:00:00\" and days_of_week [\"Tuesday\", \"Wednesday\", \"Monday\"].\n\n- \"continuous_example\" with attributes: name \"Continuous\", description \"This is a continuous daily schedule\", project_id referencing the project, space_id from variable, and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a continuous_daily_schedule block with interval \"OnceHourly\", hour_interval 3, run_after \"2024-03-22T09:00:00\", run_until \"2024-03-29T13:00:00\", and days_of_week [\"Monday\", \"Tuesday\", \"Friday\"].\n\n- \"deploy_latest_example\" with attributes: name \"Deploy Latest\", project_id referencing the project, space_id from variable, and a deploy_latest_release_action block with source_environment_id referencing the development environment, destination_environment_id referencing the test environment, and should_redeploy true. It includes a cron_expression_schedule block with cron_expression \"0 0 06 * * Mon-Fri\".\n\n- \"deploy_new_example\" with attributes: name \"Deploy New\", project_id referencing the project, space_id from variable, and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a cron_expression_schedule block with cron_expression \"0 0 06 * * Mon-Fri\".\n\n- \"date_of_month\" with attributes: name \"Date Of Month\", project_id referencing the project, space_id from variable, and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a days_per_month_schedule block with monthly_schedule_type \"DateOfMonth\", start_time \"2024-03-22T09:00:00\", date_of_month \"1\", day_number_of_month \"1\", and day_of_week \"Monday\".\n\n- \"day_of_month\" with attributes: name \"Day Of Month\", project_id referencing the project, space_id from variable, and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a days_per_month_schedule block with monthly_schedule_type \"DayOfMonth\", start_time \"2024-03-22T09:00:00\", date_of_month \"1\", day_number_of_month \"1\", and day_of_week \"Monday\".\n\n- \"runbook_example\" with attributes: name \"Runbook\", description \"This is a Cron schedule\", project_id referencing the project, space_id from variable, and a run_runbook_action block with runbook_id referencing the runbook and target_environment_ids referencing test and development environments. It includes a cron_expression_schedule block with cron_expression \"0 0 06 * * Mon-Fri\".\n\n- \"timezone_example\" with attributes: name \"Time Zone Example\", description \"This is a continuous daily schedule\", project_id referencing the project, space_id from variable, timezone \"E. Australia Standard Time\", and a deploy_new_release_action block with destination_environment_id referencing the test environment. It includes a continuous_daily_schedule block with interval \"OnceHourly\", hour_interval 3, run_after \"2024-03-22T09:00:00\", run_until \"2024-03-29T13:00:00\", and days_of_week [\"Monday\", \"Tuesday\", \"Friday\"].\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes:\n\n- \"development_environment\": name \"Development\" as the name of this resource, description \"A test environment\" as the description of this environment, allow_dynamic_infrastructure true, use_guided_failure false, and nested blocks jira_extension_settings with environment_type \"unmapped\", jira_service_management_extension_settings with is_enabled true, and servicen"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"once_daily_example\" {\n  name        = \"Once Daily example\"\n  description = \"This is a once daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  once_daily_schedule {\n    start_time   = \"2024-03-22T09:00:00\"\n    days_of_week = [\"Tuesday\", \"Wednesday\", \"Monday\"]\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"continuous_example\" {\n  name        = \"Continuous\"\n  description = \"This is a continuous daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  continuous_daily_schedule {\n    interval      = \"OnceHourly\"\n    hour_interval = 3\n    run_after     = \"2024-03-22T09:00:00\"\n    run_until     = \"2024-03-29T13:00:00\"\n    days_of_week  = [\"Monday\", \"Tuesday\", \"Friday\"]\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"deploy_latest_example\" {\n  name       = \"Deploy Latest\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_latest_release_action {\n    source_environment_id      = octopusdeploy_environment.development_environment.id\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n    should_redeploy            = true\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"deploy_new_example\" {\n  name       = \"Deploy New\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"date_of_month\" {\n  name       = \"Date Of Month\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  days_per_month_schedule {\n    monthly_schedule_type  = \"DateOfMonth\"\n    start_time = \"2024-03-22T09:00:00\"\n    date_of_month = \"1\"\n    day_number_of_month = \"1\"\n    day_of_week = \"Monday\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"day_of_month\" {\n  name       = \"Day Of Month\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  days_per_month_schedule {\n    monthly_schedule_type  = \"DayOfMonth\"\n    start_time = \"2024-03-22T09:00:00\"\n    date_of_month = \"1\"\n    day_number_of_month = \"1\"\n    day_of_week = \"Monday\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"runbook_example\" {\n  name        = \"Runbook\"\n  description = \"This is a Cron schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  run_runbook_action {\n    target_environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id]\n    runbook_id             = octopusdeploy_runbook.runbook.id\n  }\n  cron_expression_schedule {\n    cron_expression = \"0 0 06 * * Mon-Fri\"\n  }\n}\n\nresource \"octopusdeploy_project_scheduled_trigger\" \"timezone_example\" {\n  name        = \"Time Zone Example\"\n  description = \"This is a continuous daily schedule\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  space_id = var.octopus_space_id\n  timezone = \"E. Australia Standard Time\"\n  deploy_new_release_action {\n    destination_environment_id = octopusdeploy_environment.test_environment.id\n  }\n  continuous_daily_schedule {\n    interval      = \"OnceHourly\"\n    hour_interval = 3\n    run_after     = \"2024-03-22T09:00:00\"\n    run_until     = \"2024-03-29T13:00:00\"\n    days_of_week  = [\"Monday\", \"Tuesday\", \"Friday\"]\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"False\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Define a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Define a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Define a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Define a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate a resource \"octopusdeploy_certificate\" named \"test\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of the file \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as the list of environment IDs associated with this resource, notes set to \"A test certificate\", tenant_tags set to an empty list as the list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as the list of tenant IDs associated with this certificate.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_eks\" to manage Kubernetes cluster deployment targets in Octopus Deploy with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" environment as the list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"eks\"], cluster_certificate set to an empty string, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string, skip_tls_verification set to true, tenant_tags set to an empty list as the list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as the list of tenant IDs associated with this resource, thumbprint set to an empty string, and uri set to an empty string. Define an endpoint block with communication_style set to \"Kubernetes\", cluster_certificate set to an empty string, cluster_url set to \"https://cluster\", namespace set to an empty string, skip_tls_verification set to true, and default_worker_pool_id set to an empty string. Define a container block with feed_id and image set to empty strings. Define a certificate_authentication block with client_certificate set to the ID of the \"test\" certificate resource."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_certificate\" \"test\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_eks{\n  cluster_url                       = \"https://cluster\"\n  environments                      = [\"${octopusdeploy_environment.test_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  endpoint {\n    communication_style    = \"Kubernetes\"\n    cluster_certificate    = \"\"\n    cluster_url            = \"https://cluster\"\n    namespace              = \"\"\n    skip_tls_verification  = true\n    default_worker_pool_id = \"\"\n  }\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  certificate_authentication {\n    client_certificate = octopusdeploy_certificate.test.id\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to associate dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this environment, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_azure_subscription_account\" named \"account_subscription\" to manage Azure subscription accounts in Octopus Deploy with attributes: description set to \"A test account\" as the description of this Azure subscription account, name set to \"Subscription\" as the name of this resource, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, storage_endpoint_suffix set to \"storage_endpoint_suffix\" as the storage endpoint suffix associated with this Azure subscription account, subscription_id set to \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\" as the subscription ID of this resource, azure_environment set to \"AzureCloud\" as the Azure environment associated with this resource, management_endpoint set to \"management_endpoint\", and certificate set to the contents of the file \"dummycert.txt\".\n\nCreate a resource \"octopusdeploy_azure_cloud_service_deployment_target\" named \"target_azure\" to manage Azure cloud service deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the \"development_environment\" resource as a list of environment IDs associated with this resource, name set to \"Azure\" as the name of this resource, roles set to a list containing \"cloud\", account_id set to the ID of the \"account_subscription\" resource, cloud_service_name set to \"servicename\", storage_account_name set to \"accountname\", default_worker_pool_id set to an empty string, health_status set to \"Unhealthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this resource, thumbprint set to an empty string, and use_current_instance_count set to true."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_azure_subscription_account\" \"account_subscription\" {\n  description                       = \"A test account\"\n  name                              = \"Subscription\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  storage_endpoint_suffix           = \"storage_endpoint_suffix\"\n  subscription_id                   = \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\"\n  azure_environment                 = \"AzureCloud\"\n  management_endpoint               = \"management_endpoint\"\n  certificate                       = file(\"dummycert.txt\")\n}\n\nresource \"octopusdeploy_azure_cloud_service_deployment_target\" \"target_azure\" {\n  environments                      = [octopusdeploy_environment.development_environment.id]\n  name                              = \"Azure\"\n  roles                             = [\"cloud\"]\n  account_id                        = octopusdeploy_azure_subscription_account.account_subscription.id\n  cloud_service_name                = \"servicename\"\n  storage_account_name              = \"accountname\"\n  default_worker_pool_id            = \"\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  use_current_instance_count        = true\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_generic_oidc_account\" named \"example\" to manage a Generic OIDC Account in Octopus Deploy with attributes: name set to \"Generic OpenID Connect\" specifying the name of the generic oidc account, execution_subject_keys set to [\"space\"] defining keys to include in a deployment or runbook, audience set to \"api://default\" indicating the audience associated with this resource, description set to \"A test account\" describing this generic oidc account, and tenanted_deployment_participation set to \"Untenanted\" specifying the tenanted deployment mode of the resource."},{"role":"assistant","content":"resource \"octopusdeploy_generic_oidc_account\" \"example\" {\n  name            = \"Generic OpenID Connect\"\n  execution_subject_keys = [\"space\"]\n  audience = \"api://default\"\n  description = \"A test account\"\n  tenanted_deployment_participation = \"Untenanted\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, and description set to \"Test tenant\" as the description of this tenant.\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"tenant_project\" to manage a project tenant in Octopus Deploy with attributes: environment_ids set to the list of IDs of test_environment, development_environment, and production_environment environments as the environment IDs associated with this tenant, project_id set to the ID of deploy_frontend_project as the project ID associated with this tenant, and tenant_id set to the ID of tenant_team_a as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_tenant_project_variable\" named \"tenantprojectvariable6_team_a\" to manage a tenant project variable in Octopus Deploy with attributes: environment_id set to the ID of development_environment as the ID of the environment, project_id set to the ID of deploy_frontend_project as the ID of the project, template_id set to the first template ID of deploy_frontend_project as the ID of the variable template, tenant_id set to the ID of tenant_team_a as the ID of the tenant, and value set to \"my value\" as the value of the variable; this resource depends on octopusdeploy_tenant_project.tenant_project.\n\nCreate a resource \"octopusdeploy_tenant_common_variable\" named \"tenantcommonvariable1_team_a\" to manage a tenant common variable in Octopus Deploy with attributes: library_variable_set_id set to the ID of library_variable_set_octopus_variables as the ID of the library variable set, template_id set to the first template ID of library_variable_set_octopus_variables as the ID of the variable template, tenant_id set to the ID of tenant_team_a as the ID of the tenant, and value set to \"my value\" as the value of the variable; this resource depends on octopusdeploy_tenant_project.tenant_project.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false to disable guided failure.\n\nCreate a resource \"octopusdeploy_library_variable_set\" named \"library_variable_set_octopus_variables\" to manage library variable sets in Octopus Deploy with attribute: name set to \"Octopus Variables\" as the name of this resource; define three template blocks each with attributes: \n- first template with name \"template\" as the name of the variable set by the parameter, label \"a\" as the label shown beside the parameter, help_text \"a\" as the help presented alongside the parameter input, default_value \"a\" as the default value for the parameter, and display_settings with \"Octopus.ControlType\" set to \"SingleLineText\" as the display settings for the parameter;\n- second template with name \"Drop Down\", label \"Label\", help_text \"Help Text\", default_value \"Value1\", and display_settings with \"Octopus.ControlType\" set to \"Select\" and \"Octopus.SelectOptions\" set to \"Value1|Display text 1\\nValue2|Display text 2\";\n- third template with name \"Check Box\", label \"Check Box\", help_text \"Help Text\", default_value \"Default\", and display_settings with \"Octopus.ControlType\" set to \"Checkbox\".\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false to disable skipping if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to disable treating releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false,"},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenant_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id    = octopusdeploy_tenant.tenant_team_a.id\n}\nresource \"octopusdeploy_tenant_project_variable\" \"tenantprojectvariable6_team_a\" {\n  environment_id = octopusdeploy_environment.development_environment.id\n  project_id     = octopusdeploy_project.deploy_frontend_project.id\n  template_id    = octopusdeploy_project.deploy_frontend_project.template[0].id\n  tenant_id      = octopusdeploy_tenant.tenant_team_a.id\n  value          = \"my value\"\n  depends_on = [octopusdeploy_tenant_project.tenant_project]\n}\n\nresource \"octopusdeploy_tenant_common_variable\" \"tenantcommonvariable1_team_a\" {\n  library_variable_set_id = \"${octopusdeploy_library_variable_set.library_variable_set_octopus_variables.id}\"\n  template_id             = \"${octopusdeploy_library_variable_set.library_variable_set_octopus_variables.template[0].id}\"\n  tenant_id               = \"${octopusdeploy_tenant.tenant_team_a.id}\"\n  value                   = \"my value\"\n  depends_on = [octopusdeploy_tenant_project.tenant_project]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_library_variable_set\" \"library_variable_set_octopus_variables\" {\n  name        = \"Octopus Variables\"\n\n  template {\n    name             = \"template\"\n    label            = \"a\"\n    help_text        = \"a\"\n    default_value    = \"a\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n  }\n\n  template {\n    name             = \"Drop Down\"\n    label            = \"Label\"\n    help_text        = \"Help Text\"\n    default_value    = \"Value1\"\n    display_settings = { \"Octopus.ControlType\" = \"Select\", \"Octopus.SelectOptions\" = \"Value1|Display text 1\\nValue2|Display text 2\" }\n  }\n\n  template {\n    name             = \"Check Box\"\n    label            = \"Check Box\"\n    help_text        = \"Help Text\"\n    default_value    = \"Default\"\n    display_settings = { \"Octopus.ControlType\" = \"Checkbox\" }\n  }\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [octopusdeploy_library_variable_set.library_variable_set_octopus_variables.id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  template {\n    name             = \"Project Template Variable\"\n    label            = \"Test\"\n    default_value    = \"Test\"\n    help_text = \"help text goes here\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"The description of this project group.\" with value \"Test Description\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"The description of this environment.\" with value \"A test environment\", name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, use_guided_failure set to false, and sort_order set to 0, 1, and 2 respectively as the order number to sort an environment.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, ids set to null as a filter to search by a list of IDs, partial_name set to an empty string as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" to set the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the id of the first lifecycle from data source \"lifecycle_default_lifecycle\", name set to \"Test\", project_group_id set to the id of \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable \"octopus_space_id\", and included_library_variable_sets set to an empty list.\n\nInclude a nested block \"versioning_strategy\" with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nInclude a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_runbook\" named \"runbook\" to manage runbooks in Octopus Deploy with attributes: project_id set to the id of \"deploy_frontend_project\", name set to \"Runbook\", description set to \"Test Runbook\", multi_tenancy_mode set to \"Untenanted\" as the tenanted deployment mode, environment_scope set to \"Specified\" to determine how the runbook is scoped to environments, environments set to a list containing the id of \"development_environment\", default_guided_failure_mode set to \"EnvironmentDefault\", and force_package_download set to false.\n\nInclude a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nInclude a nested block \"retention_policy\" with attribute quantity_to_keep set to 10 to specify how many runs to keep per environment.\n\nCreate a resource \"octopusdeploy_process\" named \"process_test_runbook\" to manage Runbook and Deployment Processes in Octopus Deploy with attributes: project_id set to the id of \"deploy_frontend_project\" and runbook_id set to the id of \"runbook\".\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_step_order_test_runbook\" to manage order of Steps of a Runbook or Deployment Process in Octopus Deploy with attributes: process_id set to the id of \"process_test_runbook\" and steps set to a list containing the ids of \"process_step_test_runbook_hello_world__using_powershell_\" and \"process_step_test_runbook_test\".\n\nCreate a variable \"project_runbook_step_test_packageid\" of type string, not nullable, not sensitive,"},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n  sort_order                   = 0\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n  sort_order                   = 1\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n  sort_order                   = 2\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_runbook\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_runbook\" {\n  process_id = \"${octopusdeploy_process.process_test_runbook.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test_runbook_hello_world__using_powershell_.id}\", \"${octopusdeploy_process_step.process_step_test_runbook_test.id}\"]\n}\n\nvariable \"project_runbook_step_test_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named  from step Test in project Runbook\"\n  default     = \"terraform\"\n}\nresource \"octopusdeploy_process_step\" \"process_step_test_runbook_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_runbook.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"${var.project_runbook_step_test_packageid}\",\n    properties = {\n      SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n  }\n}\n\nvariable \"project_runbook_step_hello_world__using_powershell__package_package1_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named package1 from step Hello world (using PowerShell) in project Runbook\"\n  default     = \"package1\"\n}\nresource \"octopusdeploy_process_step\" \"process_step_test_runbook_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_runbook.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = [\"${octopusdeploy_environment.development_environment.id}\"]\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n      id = null,\n      package_id = \"${var.project_runbook_step_hello_world__using_powershell__package_package1_packageid}\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.EnabledFeatures\" = \"Octopus.Features.JsonConfigurationVariables\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"tag1/a\", \"tag1/b\"] as a list of tenant tags associated with this resource, and depends_on set to depend on resources octopusdeploy_tag.tag_a and octopusdeploy_tag.tag_b.\n\nCreate two resources \"octopusdeploy_tenant_project\" named \"tenanta_project1\" and \"tenanta_project2\" to manage tenant projects with attributes: environment_ids set to the IDs of test, development, and production environments as the environment IDs associated with this tenant, project_id set to the respective project IDs (deploy_frontend_project and project2) as the project ID associated with this tenant, and tenant_id set to tenant_team_a's ID as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate two resources \"octopusdeploy_project\" named \"deploy_frontend_project\" and \"project2\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false as treating releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the default lifecycle from the lifecycle data source as the lifecycle ID associated with this project, name set to \"Test\" and \"Test2\" respectively as the name of this resource, project_group_id set to the ID of project_group_test as the project group ID associated with this project, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, space_id set to var.octopus_space_id as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs, versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_tag_set\" named \"tagset_tag1\" to manage tag sets in Octopus Deploy with attributes: name set to \"tag1\" as the name of this resource, description set to \"Test tagset\" as the description of this tag set, and sort_order set to 0 as the sort order associated with this resource.\n\nCreate two resources \"octopusdeploy_tag\" named \"tag_a\" and \"tag_b\" to manage tags in Octopus Deploy with attributes: name set to \"a\" and \"b\" respectively as the name of the tag, color set to \"#333333\" as the color of the tag, description set to \"tag a\" and \"tag b\" respectively as the description of the tag, sort_order set to 2 and 3 respectively as the sort order of the tag, and tag_set_id set to the ID of tagset_tag1 as the ID of the associated tag set."},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project1\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id =  octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project2\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.project2.id\n  tenant_id =  octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_project\" \"project2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test2\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_library_variable_set\" named \"library_variable_set_variables_variableset\" to manage library variable sets in Octopus Deploy with attributes: name set to \"VariableSet\" as the name of this resource, description set to an empty string as the description of this library variable set. Define three template blocks each representing a variable template with attributes: \n- For the first template: name set to \"VariableA\" as the name of the variable set by the parameter, label set to \"This is a variable\" as the label shown beside the parameter, default_value set to \"a\" as the default value for the parameter, help_text set to \"This is help text\" as the help presented alongside the parameter input, display_settings set to {\"Octopus.ControlType\" = \"SingleLineText\"} as the display settings for the parameter.\n- For the second template: name set to \"VariableB\", label set to \"This is a variable\", default_value set to \"b\", help_text set to \"This is help text\", display_settings set to {\"Octopus.ControlType\" = \"SingleLineText\"}.\n- For the third template: name set to \"secret\", label set to \"This is a secret variable\", default_value set to \"a secret\", help_text set to \"This is help text\", display_settings set to {\"Octopus.ControlType\" = \"Sensitive\"}.\n\nCreate a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"tag1/a\", \"tag1/b\"] as a list of tenant tags associated with this resource. This resource depends on resources \"octopusdeploy_tag.tag_a\" and \"octopusdeploy_tag.tag_b\".\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"tenanta_project\" to manage project tenants in Octopus Deploy with attributes: environment_ids set to the IDs of environments \"test_environment\", \"development_environment\", and \"production_environment\" as the environment IDs associated with this tenant, project_id set to the ID of project \"deploy_frontend_project\" as the project ID associated with this tenant, tenant_id set to the ID of tenant \"tenant_team_a\" as the tenant ID associated with this tenant.\n\nCreate three resources \"octopusdeploy_tenant_common_variable\" named \"tenantcommonvariable1_variablea\", \"tenantcommonvariable1_variableb\", and \"tenantcommonvariable1_secret\" to manage tenant common variables in Octopus Deploy with attributes:\n- For \"tenantcommonvariable1_variablea\": library_variable_set_id set to the ID of \"library_variable_set_variables_variableset\" as the ID of the library variable set, template_id set to the ID of the first template in the library variable set as the ID of the variable template, tenant_id set to the ID of tenant \"tenant_team_a\" as the ID of the tenant, value set to \"Override Variable A\" as the value of the variable. This resource depends on \"octopusdeploy_tenant_project.tenanta_project\".\n- For \"tenantcommonvariable1_variableb\": library_variable_set_id set to the ID of the library variable set, template_id set to the ID of the second template, tenant_id set to the ID of tenant \"tenant_team_a\", value set to \"Override Variable B\". Depends on \"octopusdeploy_tenant_project.tenanta_project\".\n- For \"tenantcommonvariable1_secret\": library_variable_set_id set to the ID of the library variable set, template_id set to the ID of the third template, tenant_id set to the ID of tenant \"tenant_team_a\", value set to \"Override Secret\". Depends on \"octopusdeploy_tenant_project.tenanta_project\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes:\n- For each environment: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", or \"Production\" respectively as the name of this resource, use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, take set to 1 as a filter to specify the number"},{"role":"assistant","content":"resource \"octopusdeploy_library_variable_set\" \"library_variable_set_variables_variableset\" {\n  name        = \"VariableSet\"\n  description = \"\"\n\n  template {\n    name             = \"VariableA\"\n    label            = \"This is a variable\"\n    default_value    = \"a\"\n    help_text = \"This is help text\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n  }\n  template {\n    name             = \"VariableB\"\n    label            = \"This is a variable\"\n    default_value    = \"b\"\n    help_text = \"This is help text\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n  }\n  template {\n    name             = \"secret\"\n    label            = \"This is a secret variable\"\n    default_value    = \"a secret\"\n    help_text = \"This is help text\"\n    display_settings = { \"Octopus.ControlType\" = \"Sensitive\" }\n  }\n}\nresource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id = octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant_common_variable\" \"tenantcommonvariable1_variablea\" {\n  library_variable_set_id = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.id}\"\n  template_id             = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.template[0].id}\"\n  tenant_id               = \"${octopusdeploy_tenant.tenant_team_a.id}\"\n  value                   = \"Override Variable A\"\n  depends_on = [octopusdeploy_tenant_project.tenanta_project]\n}\n\nresource \"octopusdeploy_tenant_common_variable\" \"tenantcommonvariable1_variableb\" {\n  library_variable_set_id = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.id}\"\n  template_id             = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.template[1].id}\"\n  tenant_id               = \"${octopusdeploy_tenant.tenant_team_a.id}\"\n  value                   = \"Override Variable B\"\n  depends_on = [octopusdeploy_tenant_project.tenanta_project]\n}\n\nresource \"octopusdeploy_tenant_common_variable\" \"tenantcommonvariable1_secret\" {\n  library_variable_set_id = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.id}\"\n  template_id             = \"${octopusdeploy_library_variable_set.library_variable_set_variables_variableset.template[2].id}\"\n  tenant_id               = \"${octopusdeploy_tenant.tenant_team_a.id}\"\n  value                   = \"Override Secret\"\n  depends_on = [octopusdeploy_tenant_project.tenanta_project]\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [octopusdeploy_library_variable_set.library_variable_set_variables_variableset.id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and an empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_eks\" to manage a Kubernetes cluster deployment target with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" resource, name set to \"Test\" as the name of this resource, roles set to [\"eks\"], cluster_certificate set to an empty string, cluster_certificate_path set to \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\", machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string, skip_tls_verification set to true to skip TLS verification, tenant_tags set to an empty list, tenanted_deployment_participation set to \"Untenanted\", tenants set to an empty list, thumbprint set to an empty string, and uri set to an empty string. Include a container block with feed_id and image set to empty strings. Include an endpoint block with communication_style set to \"Kubernetes\". Include a pod_authentication block with token_path set to \"/var/run/secrets/kubernetes.io/serviceaccount/token\"."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_eks {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  cluster_certificate_path          = \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  endpoint {\n    communication_style    = \"Kubernetes\"\n  }\n\n  pod_authentication {\n    token_path = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_aws_openid_connect_account\" named \"awsoidc\" to manage AWS OIDC accounts in Octopus Deploy with attributes: description set to \"A test account\" as a user-friendly description of this AWS OIDC account, name set to \"AWSOIDC\" as the name of this AWS OIDC account, environments set to null representing a list of environment IDs associated with this resource, tenant_tags set to an empty list representing a list of tenant tags associated with this resource, tenants set to null representing a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" defining the tenanted deployment mode of the resource, account_test_subject_keys set to [\"space\"] specifying keys to include in an account test, execution_subject_keys set to [\"space\"] specifying keys to include in a deployment or runbook, health_subject_keys set to [\"space\"] specifying keys to include in a health check, session_duration set to 3600 defining the duration in seconds of the role session, and role_arn set to \"whatever\" specifying the Amazon Resource Name (ARN) of the role that the caller is assuming."},{"role":"assistant","content":"resource \"octopusdeploy_aws_openid_connect_account\" \"awsoidc\" {\n  description                       = \"A test account\"\n  name                              = \"AWSOIDC\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  account_test_subject_keys         = [\"space\"]\n  execution_subject_keys = [\"space\"]\n  health_subject_keys = [\"space\"]\n  session_duration = 3600\n  role_arn = \"whatever\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to not filter by lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to not filter by IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate data sources \"octopusdeploy_feeds\" named \"helm\", \"docker\", \"github\", \"maven\", and \"nuget\" to provide information about existing feeds with attributes: feed_type set respectively to \"Helm\", \"Docker\", \"GitHub\", \"Maven\", and \"NuGet\" to filter by feed type, ids set to empty list to not filter by IDs, partial_name set to the respective feed type name to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" to filter by name, ids set to null to not filter by IDs, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate a data source \"octopusdeploy_library_variable_sets\" named \"script_module\" to provide information about existing library variable sets with attributes: partial_name set to \"Script Module\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip if already installed, description set to \"Test project\" as the project description, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the project name, project_group_id set to the ID of the project group from data source \"project_group\", tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to a list containing the ID of the library variable set from data source \"script_module\", versioning_strategy block with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to specify the versioning template, and connectivity_policy block with attributes allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage deployment processes in Octopus Deploy with attribute project_id set to the ID of the project \"project_1\".\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of steps of a deployment process with attribute process_id set to the ID of the process \"test\" and steps set to a list containing the ID of the process step \"process_step_get_mysql_host\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a deployment process with attributes: name set to \"Get MySQL Host\" as the step name, type set to \"Octopus.KubernetesRunScript\" as the execution type, process_id set to the ID of the process \"test\", channels set to null to not filter by channels, condition set to \"Success\" to run the step on success, environments set to null to not filter by environments, excluded_environments set to null to not exclude any environments, worker_pool_id set to the ID of the worker pool from data source \"workerpool_default\", package_requirement set to \"LetOctopusDecide\" to specify package acquisition timing, slug set to \"get-mysql-host\" as the human-readable unique identifier, start_trigger set to \"Start"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"helm\" {\n  feed_type    = \"Helm\"\n  ids          = []\n  partial_name = \"Helm\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"docker\" {\n  feed_type    = \"Docker\"\n  ids          = []\n  partial_name = \"Docker\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"github\" {\n  feed_type    = \"GitHub\"\n  ids          = []\n  partial_name = \"GitHub\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"maven\" {\n  feed_type    = \"Maven\"\n  ids          = []\n  partial_name = \"Maven\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"nuget\" {\n  feed_type    = \"NuGet\"\n  ids          = []\n  partial_name = \"NuGet\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"script_module\" {\n  partial_name = \"Script Module\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = [data.octopusdeploy_library_variable_sets.script_module.library_variable_sets[0].id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.project_1.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  worker_pool_id                     = data.octopusdeploy_worker_pools.workerpool_default.worker_pools[0].id\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \"Docker\" specifying the name of this resource, description set to \"A test worker pool\" describing this static worker pool, is_default set to false, and sort_order set to 3 defining the order number to sort a dynamic worker pool."},{"role":"assistant","content":"resource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage projects in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_version_controlled set to true, lifecycle_id set to the id of the first lifecycle from the data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the id of the resource \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, and included_library_variable_sets set to an empty list as the list of included library variable set IDs.\n\nDefine a nested block \"versioning_strategy\" with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nDefine a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nDefine a nested block \"git_username_password_persistence_settings\" to provide Git-related persistence settings for a version-controlled project with attributes: url set to \"https://github.com/mcasperson/octogittest.git\" as the URL associated with these version control settings, username set to \"mcasperson\" as the username for the Git credential, password set to the sensitive variable \"project_git_password\" as the password for the Git credential, base_path set to \".octopus/projectest\" as the base path associated with these version control settings, default_branch set to \"main\" as the default branch associated with these version control settings, and protected_branches set to an empty list as a list of protected branch patterns.\n\nDefine a variable \"project_git_password\" of type string, non-nullable, sensitive, with description \"The git password for the project\"."},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = true\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n\n  git_username_password_persistence_settings {\n    url                = \"https://github.com/mcasperson/octogittest.git\"\n    username           = \"mcasperson\"\n    password           = \"${var.project_git_password}\"\n    base_path          = \".octopus/projectest\"\n    default_branch     = \"main\"\n    protected_branches = []\n  }\n}\n\nvariable \"project_git_password\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The git password for the project\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"tag1/a\", \"tag1/b\"] as a list of tenant tags associated with this resource, and depends_on set to depend on resources octopusdeploy_tag.tag_a and octopusdeploy_tag.tag_b.\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"tenanta_project\" to manage tenant projects in Octopus Deploy with attributes: environment_ids set to the IDs of environments test_environment, development_environment, and production_environment as the environment IDs associated with this tenant, project_id set to the ID of deploy_frontend_project as the project ID associated with this tenant, and tenant_id set to the ID of tenant_team_a as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_certificate\" named \"certificate_kind_ca\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of the file \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as a list of environment IDs associated with this resource, notes set to \"A test certificate\" as notes (not in schema but present in config), tenant_tags set to an empty list as a list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this certificate.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false to disable guided failure.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false to not default to skip if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to disable treating releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to disable discrete channel release, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the first lifecycle from lifecycle_default_lifecycle data source as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the ID of project_group_test as the project group ID associated with this project, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, space_id set to var.octopus_space_id as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs, and nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" as the versioning strategy template, and connectivity_policy with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" as the skip machine behavior.\n\nCreate a resource \"octopusdeploy_tag_set\" named \"tagset_tag1\" to manage tag sets in Octopus Deploy with attributes: name set to \"tag1\" as the name"},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id =  octopusdeploy_tenant.tenant_team_a.id\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block (max 1) with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block (max 1) with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block (max 1) with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block (min 1, max 1) with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block (min 1, max 1) with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block (max 1) with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_offline_package_drop_deployment_target\" named \"target_offline\" to manage offline package drop deployment targets in Octopus Deploy with attributes: applications_directory set to \"c:\\\\temp\", working_directory set to \"c:\\\\temp\", environments set to a list containing the ID of the \"development_environment\" environment as a list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"offline\"], health_status set to \"Healthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this resource."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_offline_package_drop_deployment_target\" \"target_offline\" {\n  applications_directory            = \"c:\\\\temp\"\n  working_directory                 = \"c:\\\\temp\"\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"offline\"]\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take (or return) in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_version_controlled set to false, lifecycle_id set to the ID of the first lifecycle from the data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, and included_library_variable_sets set to an empty list as the list of included library variable set IDs.\n\nDefine a versioning_strategy block with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nDefine a connectivity_policy block with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nDefine two template blocks each representing a project template parameter with attributes:\n- First template: name set to \"Project Template Variable\" as the name of the variable set by the parameter, label set to \"Test\" as the label shown beside the parameter, default_value set to \"Test\" as a default value for the parameter, help_text set to \"help text goes here\" as the help presented alongside the parameter input, and display_settings set to {\"Octopus.ControlType\" = \"Sensitive\"} as the display settings for the parameter.\n- Second template: name set to \"Project Template Variable 2\", label set to \"Test2\", default_value set to \"Test2\", help_text set to \"help text goes here\", and display_settings set to {\"Octopus.ControlType\" = \"SingleLineText\"}."},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n\n  template {\n    name             = \"Project Template Variable\"\n    label            = \"Test\"\n    default_value    = \"Test\"\n    help_text = \"help text goes here\"\n    display_settings = { \"Octopus.ControlType\" = \"Sensitive\" }\n  }\n\n  template {\n    name             = \"Project Template Variable 2\"\n    label            = \"Test2\"\n    default_value    = \"Test2\"\n    help_text = \"help text goes here\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"], username set to \"user\" as the username associated with this resource, and password set to \"password\" as the password associated with this resource.\n\nCreate a resource \"octopusdeploy_git_credential\" named \"gitcredential_test\" to manage a Git credential in Octopus Deploy with attributes: description set to \"test git credential\" as the description of this Git Credential, name set to \"test\" as the name of this Git Credential, type set to \"UsernamePassword\" as the Git credential authentication type, username set to \"admin\" as the username for the Git credential, and password set to the sensitive variable \"gitcredential_test\" which holds the password for the Git credential.\n\nCreate a sensitive string variable \"gitcredential_test\" with description \"The secret variable value associated with the git credential test\", not nullable, sensitive, and default value \"Password01!\".\n\nCreate a resource \"octopusdeploy_ssh_key_account\" named \"account_ssh\" to manage SSH key accounts in Octopus Deploy with attributes: description set to \"A test account\" as the description of this SSH key account, name set to \"SSH\" as the name of this resource, environments set to null as the list of environment IDs associated with this resource, tenant_tags set to an empty list as the list of tenant tags associated with this resource, tenants set to null as the list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, private_key_file set to \"unused\", username set to \"admin\" as the username associated with this resource, and private_key_passphrase loaded from file \"dummycert2.txt\".\n\nCreate a resource \"octopusdeploy_azure_service_principal\" named \"account_azure\" to manage Azure service principal accounts in Octopus Deploy with attributes: description set to \"Azure Account\" as the description of this Azure service principal account, name set to \"Azure\" as the name of this resource, environments set to an empty list as the list of environment IDs associated with this resource, tenants set to an empty list as the list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, application_id set to \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\" as the application ID of this resource, password set to \"secretgoeshere\" as the password associated with this resource, subscription_id set to \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\" as the subscription ID of this resource, and tenant_id set to \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\" as the tenant ID of this resource.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Project Group\" as a filter to search by a partial name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"secret\" to manage variables in Octopus Deploy with attributes: name set to \"Test.SecretVariable\" as the name of this resource, type set to \"Sensitive\" as the type of variable represented by this resource, description set to \"Test variable\" as the description of this variable, is_sensitive set to true indicating this resource is considered sensitive and should be kept secret, is_editable set to true indicating this variable is considered editable, owner_id set to the ID of the project \"deploy_frontend_project\", and sensitive_value set to \"Test\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n  username                             = \"user\"\n  password                             = \"password\"\n}\n\nresource \"octopusdeploy_git_credential\" \"gitcredential_test\" {\n  description = \"test git credential\"\n  name        = \"test\"\n  type        = \"UsernamePassword\"\n  username    = \"admin\"\n  password    = \"${var.gitcredential_test}\"\n}\nvariable \"gitcredential_test\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret variable value associated with the git credential test\"\n  default     = \"Password01!\"\n}\n\nresource \"octopusdeploy_ssh_key_account\" \"account_ssh\" {\n  description                       = \"A test account\"\n  name                              = \"SSH\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  private_key_file                  = \"unused\"\n  username                          = \"admin\"\n  # Because of https://github.com/OctopusDeployLabs/terraform-provider-octopusdeploy/issues/343\n  private_key_passphrase            = file(\"dummycert2.txt\")\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_azure\" {\n  description                       = \"Azure Account\"\n  name                              = \"Azure\"\n  environments                      = []\n  tenants                           = []\n  tenanted_deployment_participation = \"Untenanted\"\n  application_id                    = \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\"\n  password                          = \"secretgoeshere\"\n  subscription_id                   = \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\"\n  tenant_id                         = \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\"\n}\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Default Project Group\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"secret\" {\n  name = \"Test.SecretVariable\"\n  type = \"Sensitive\"\n  description = \"Test variable\"\n  is_sensitive = true\n  is_editable = true\n  owner_id = octopusdeploy_project.deploy_frontend_project.id\n  sensitive_value = \"Test\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = { package1 = { acquisition_location = \"ExecutionTarget\", feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\", id = null, package_id = \"package1\", properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" } } }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\nresource \"octopusdeploy_gcp_account\" \"account_google\" {\n  description                       = \"A test account\"\n  name                              = \"Google\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  json_key                          = \"secretgoeshere\"\n}\nresource \"octopusdeploy_aws_account\" \"account_aws_account\" {\n  name                              = \"AWS Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  access_key                        = \"ABCDEFGHIJKLMNOPQRST\"\n  secret_key                        = \"secretgoeshere\"\n}\n\nresource \"octopusdeploy_username_password_account\" \"account_gke\" {\n  description                       = \"A test account\"\n  name                              = \"UserPass\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  username                          = \"admin\"\n  password                          = \"secretgoeshere\"\n}\nresource \"octopusdeploy_token_account\" \"account_autopilot_service_account\" {\n  description                       = \"A test account\"\n  name                              = \"Token\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  token                             = \"secretgoeshere\"\n}\nresource \"octopusdeploy_azure_subscription_account\" \"account_subscription\" {\n  description                       = \"A test account\"\n  name                              = \"Subscription\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  storage_endpoint_suffix           = \"storage_endpoint_suffix\"\n  subscription_id                   = \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\"\n  azure_environment                 = \"AzureCloud\"\n  management_endpoint               = \"management_endpoint\"\n  certificate                       = file(\"dummycert.txt\")\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_polling_tentacle_deployment_target\" named \"target_desktop_3e4k4r8\" to manage polling tentacle deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the development environment as a list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"vm\"], tentacle_url set to \"poll://abcdefghijklmnopqrst/\", is_disabled set to false, machine_policy_id set to the ID of the default machine policy, shell_name set to \"PowerShell\", shell_version set to \"5.1.22621.1\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this resource, an empty tentacle_version_details block, and thumbprint set to \"1854A302E5D9EAC1CAA3DA1F5249F82C28BB2B86\"."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_polling_tentacle_deployment_target\" \"target_desktop_3e4k4r8\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"poll://abcdefghijklmnopqrst/\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"PowerShell\"\n  shell_version                     = \"5.1.22621.1\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n\n  thumbprint = \"1854A302E5D9EAC1CAA3DA1F5249F82C28BB2B86\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create data source \"octopusdeploy_tenants\" named \"tenant\" to provide information about existing tenants with attributes: ids set to null to not filter by IDs, partial_name set to \"Team A\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_environments\" named \"test\" to provide information about existing environments with attributes: ids set to empty list to not filter by IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_environments\" named \"dev\" to provide information about existing environments with attributes: ids set to empty list to not filter by IDs, partial_name set to \"Development\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_environments\" named \"prod\" to provide information about existing environments with attributes: ids set to empty list to not filter by IDs, partial_name set to \"Production\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate resource \"octopusdeploy_tenant_project\" named \"tenant_project\" to manage a project tenant in Octopus Deploy with attributes: environment_ids set to a list of environment IDs from dev, test, and prod environments, project_id set to the ID of the deploy_frontend_project project, and tenant_id set to the ID of the tenant.\n\nCreate resource \"octopusdeploy_tenant_project_variable\" named \"tenantprojectvariable6_team_a\" to manage a tenant project variable in Octopus Deploy with attributes: environment_id set to the ID of the dev environment, project_id set to the ID of the deploy_frontend_project project, template_id set to the template ID of the deploy_frontend_project project, tenant_id set to the ID of the tenant, and value set to \"my project variable\". This resource depends on the tenant_project resource.\n\nCreate resource \"octopusdeploy_tenant_common_variable\" named \"tenantcommonvariable1_team_a\" to manage a tenant common variable in Octopus Deploy with attributes: library_variable_set_id set to the ID of the library variable set, template_id set to the template ID of the library variable set, tenant_id set to the ID of the tenant, and value set to \"my common variable\". This resource depends on the tenant_project resource.\n\nCreate data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to not filter by IDs, partial_name set to \"Default Lifecycle\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter by feed type, ids set to null to not filter by IDs, partial_name set to empty string, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to not filter by IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate data source \"octopusdeploy_library_variable_sets\" named \"variable\" to provide information about existing library variable sets with attributes: partial_name set to \"Octopus Variables\" to filter by partial name, skip set to 0 to skip zero items, and take set to 1 to take one item.\n\nCreate resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not default to skip if already installed, description set to \"Test project\" to describe the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimension, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimension, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the default lifecycle, name set to \"Test\" to name the project, project_group_id set to the ID of the project group, tenanted_deployment_participation set to \"TenantedOrUntenanted\" to specify the tenanted deployment mode, space_id"},{"role":"assistant","content":"data \"octopusdeploy_tenants\" \"tenant\" {\n  ids          = null\n  partial_name = \"Team A\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"test\" {\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"dev\" {\n  ids          = []\n  partial_name = \"Development\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"prod\" {\n  ids          = []\n  partial_name = \"Production\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenant_project\" {\n  environment_ids = [data.octopusdeploy_environments.dev.environments[0].id,\n    data.octopusdeploy_environments.test.environments[0].id,\n    data.octopusdeploy_environments.prod.environments[0].id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id    = data.octopusdeploy_tenants.tenant.tenants[0].id\n}\nresource \"octopusdeploy_tenant_project_variable\" \"tenantprojectvariable6_team_a\" {\n  environment_id = data.octopusdeploy_environments.dev.environments[0].id\n  project_id     = octopusdeploy_project.deploy_frontend_project.id\n  template_id    = octopusdeploy_project.deploy_frontend_project.template[0].id\n  tenant_id      = data.octopusdeploy_tenants.tenant.tenants[0].id\n  value          = \"my project variable\"\n  depends_on = [octopusdeploy_tenant_project.tenant_project]\n}\n\nresource \"octopusdeploy_tenant_common_variable\" \"tenantcommonvariable1_team_a\" {\n  library_variable_set_id = data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].id\n  template_id             = data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].template[0].id\n  tenant_id               = data.octopusdeploy_tenants.tenant.tenants[0].id\n  value                   = \"my common variable\"\n  depends_on = [octopusdeploy_tenant_project.tenant_project]\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"variable\" {\n  partial_name = \"Octopus Variables\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"TenantedOrUntenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  template {\n    name             = \"Project Template Variable\"\n    label            = \"Test\"\n    default_value    = \"Test\"\n    display_settings = { \"Octopus.ControlType\" = \"SingleLineText\" }\n    help_text = \"help text goes here\"\n  }\n}\n\n# This is one way to find a template based on a name\noutput \"lvs_common_template_id\" {\n  value = tolist([for tmp in data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].template : tmp.id if tmp.name == \"template\"])[0]\n}\n\n# The template_ids is more convenient though\noutput \"lvs_common_template_id_2\" {\n  value = \"${data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].template_ids[\"template\"]}\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: description set to \"A test environment\" describing the environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of the resource.\n\nCreate a resource \"octopusdeploy_lifecycle\" named \"simple_lifecycle\" to manage lifecycles in Octopus Deploy with attributes: description set to \"A test lifecycle\" describing the lifecycle, name set to \"Simple\" as the name of the resource.\n\nWithin \"simple_lifecycle\", define three \"phase\" blocks representing phases in the lifecycle:\n- Each phase has attributes: automatic_deployment_targets as an empty list representing environment IDs automatically deployed to, optional_deployment_targets set to the IDs of the respective environments (\"development_environment\", \"test_environment\", \"production_environment\") representing environment IDs that a release can be deployed to but not automatically, and name set to the respective environment names.\n- Each phase contains a \"release_retention_policy\" block defining the retention policy for releases with attributes: quantity_to_keep set to 1 for the first two phases and 30 for the last phase representing the number of days/releases to keep, and unit set to \"Days\" representing the unit of quantity to keep.\n- Each phase contains a \"tentacle_retention_policy\" block defining the retention policy for tentacles with attributes: quantity_to_keep set to 30 representing the number of days/releases to keep, and unit set to \"Items\" representing the unit of quantity to keep.\n\nAt the lifecycle level, define a \"release_retention_policy\" block with attributes: quantity_to_keep set to 1, unit set to \"Days\".\n\nAt the lifecycle level, define a \"tentacle_retention_policy\" block with attributes: quantity_to_keep set to 30, unit set to \"Items\"."},{"role":"assistant","content":"resource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_lifecycle\" \"simple_lifecycle\" {\n  description = \"A test lifecycle\"\n  name        = \"Simple\"\n\n  release_retention_policy {\n    quantity_to_keep    = 1\n\n    unit                = \"Days\"\n  }\n\n  tentacle_retention_policy {\n    quantity_to_keep    = 30\n\n    unit                = \"Items\"\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.development_environment.id]\n    name                         = octopusdeploy_environment.development_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.test_environment.id]\n    name                         = octopusdeploy_environment.test_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.production_environment.id]\n    name                         = octopusdeploy_environment.production_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of these resources, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_azure_web_app_deployment_target\" named \"target_web_app\" to manage Azure web app deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the development environment as a list of environment IDs associated with this resource, name set to \"Web App\" as the name of this resource, roles set to [\"cloud\"], account_id set to the ID of the Azure service principal account_sales_account, resource_group_name set to \"mattc-webapp\", web_app_name set to \"mattc-webapp\", health_status set to \"Unhealthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the first machine policy from default_machine_policy, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list, thumbprint set to an empty string, and web_app_slot_name set to \"slot1\".\n\nCreate a resource \"octopusdeploy_azure_service_principal\" named \"account_sales_account\" to manage Azure service principal accounts in Octopus Deploy with attributes: name set to \"Sales Account\" as the name of this resource, description set to an empty string as the description of this Azure service principal account, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, application_id set to \"08a4a027-6f2a-4793-a0e5-e59a3c79189f\" as the application ID of this resource, password set to the sensitive variable account_sales_account as the password associated with this resource, subscription_id set to \"3b50dcf4-f74d-442e-93cb-301b13e1e2d5\" as the subscription ID of this resource, and tenant_id set to \"3d13e379-e666-469e-ac38-ec6fd61c1166\" as the tenant ID of this resource.\n\nCreate a sensitive variable \"account_sales_account\" of type string, not nullable, with description \"The Azure secret associated with the account Sales Account\".\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \""},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\nresource \"octopusdeploy_azure_web_app_deployment_target\" \"target_web_app\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Web App\"\n  roles                             = [\"cloud\"]\n  account_id                        = \"${octopusdeploy_azure_service_principal.account_sales_account.id}\"\n  resource_group_name               = \"mattc-webapp\"\n  web_app_name                      = \"mattc-webapp\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  web_app_slot_name                 = \"slot1\"\n# This doesn't work for setting the worker pool\n#  endpoint {\n#    communication_style    = \"AzureWebApp\"\n#    default_worker_pool_id = octopusdeploy_static_worker_pool.workerpool_docker.id\n#  }\n\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_sales_account\" {\n  name                              = \"Sales Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  application_id                    = \"08a4a027-6f2a-4793-a0e5-e59a3c79189f\"\n  password                          = \"${var.account_sales_account}\"\n  subscription_id                   = \"3b50dcf4-f74d-442e-93cb-301b13e1e2d5\"\n  tenant_id                         = \"3d13e379-e666-469e-ac38-ec6fd61c1166\"\n}\nvariable \"account_sales_account\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The Azure secret associated with the account Sales Account\"\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 in nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 in nanoseconds, and connection_retry_time_limit set to 300000000000 in nanoseconds. Define a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 in nanoseconds. Define a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Define a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 in nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and script_body set to an empty string, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Define a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of these resources, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_azure_service_principal\" named \"account_azure\" to manage Azure service principal accounts in Octopus Deploy with attributes: description set to \"Azure Account\" as the description of this Azure service principal account, name set to \"Azure Account\" as the name of this resource, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, application_id set to \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\" as the application ID of this resource, password set to \"secretgoeshere\" as the password associated with this resource, subscription_id set to \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\" as the subscription ID of this resource, and tenant_id set to \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\" as the tenant ID of this resource.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_k8s\" to manage Kubernetes cluster deployment targets in Octopus Deploy with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" environment, name set to \"Test\" as the name of this resource, roles set to a list containing \"eks\" as the roles assigned to this deployment target, cluster_certificate set to an empty string as the cluster certificate, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string as the Kubernetes namespace, skip_tls_verification set to true to skip TLS verification, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this resource, thumbprint set to an empty string as the thumbprint, and uri set to an empty string as the URI. Define a container block with feed_id and image set to empty strings. Define an azure_service_principal_authentication block with account_id set to the ID"},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_azure\" {\n  description                       = \"Azure Account\"\n  name                              = \"Azure Account\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  application_id                    = \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\"\n  password                          = \"secretgoeshere\"\n  subscription_id                   = \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\"\n  tenant_id                         = \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\"\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_k8s {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  azure_service_principal_authentication {\n    account_id             = octopusdeploy_azure_service_principal.account_azure.id\n    cluster_name           = \"mycluster\"\n    cluster_resource_group = \"myresourcegroup\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_helm_feed\" named \"feed_helm\" to manage a Helm Feed in Octopus Deploy with attributes: name set to \"Helm\" to specify the name of this resource, password set to \"password\" as the password associated with this resource, feed_uri set to \"https://charts.helm.sh/stable/\" to specify the feed URI, username set to \"username\" as the username associated with this resource, and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"] to define package acquisition location options."},{"role":"assistant","content":"resource \"octopusdeploy_helm_feed\" \"feed_helm\" {\n  name                                 = \"Helm\"\n  password                             = \"password\"\n  feed_uri                             = \"https://charts.helm.sh/stable/\"\n  username                             = \"username\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_gcp_account\" named \"account_google\" to manage GCP accounts in Octopus Deploy with attributes: description set to \"A user-friendly description of this GCP account.\" as \"A test account\", name set to \"The name of this GCP account.\" as \"Google\", environments set to \"A list of environment IDs associated with this resource.\" as null, tenant_tags set to \"A list of tenant tags associated with this resource.\" as an empty list, tenants set to \"A list of tenant IDs associated with this resource.\" as null, tenanted_deployment_participation set to \"The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.\" as \"Untenanted\", and json_key set to \"The JSON key associated with this GCP account.\" as \"secretgoeshere\"."},{"role":"assistant","content":"resource \"octopusdeploy_gcp_account\" \"account_google\" {\n  description                       = \"A test account\"\n  name                              = \"Google\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  json_key                          = \"secretgoeshere\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_nuget_feed\" named \"feed_nuget\" to manage a Nuget feed in Octopus Deploy with attributes: name set to \"Nuget\" specifying the name of this resource, feed_uri set to \"https://index.docker.io\" specifying the feed URI, username set to \"username\" specifying the username associated with this resource, password set to \"password\" specifying the password associated with this resource, is_enhanced_mode set to true to improve performance of the NuGet feed, package_acquisition_location_options set to [\"Server\", \"ExecutionTarget\"] to specify locations for package acquisition, download_attempts set to 5 indicating the number of times a deployment should attempt to download a package before failing, and download_retry_backoff_seconds set to 10 specifying the number of seconds to apply as a linear back off between download attempts."},{"role":"assistant","content":"resource \"octopusdeploy_nuget_feed\" \"feed_nuget\" {\n  name                                 = \"Nuget\"\n  feed_uri                             = \"https://index.docker.io\"\n  username                             = \"username\"\n  password                             = \"password\"\n  is_enhanced_mode                     = true\n  package_acquisition_location_options = [\"Server\", \"ExecutionTarget\"]\n  download_attempts                    = 5\n  download_retry_backoff_seconds       = 10\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by no specific lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_environments\" named \"test\" to provide information about existing environments with attributes: ids set to an empty list to filter by no specific environment IDs, partial_name set to \"Test\" to filter environments by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to filter by no specific project group IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_accounts\" named \"aws_account\" to provide information about existing accounts with attributes: account_type set to \"AmazonWebServicesAccount\" to filter by account type, ids set to an empty list to filter by no specific account IDs, partial_name set to \"AWS Account\" to filter accounts by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_accounts\" named \"azure_account\" to provide information about existing accounts with attributes: account_type set to \"AzureServicePrincipal\" to filter by account type, ids set to an empty list to filter by no specific account IDs, partial_name set to \"Azure Account\" to filter accounts by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project\" to describe the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test\" to name the project, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to include no library variable sets. Define a versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to specify the versioning template. Define a connectivity_policy block with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a resource \"octopusdeploy_variable\" named \"amazon_web_services_account_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of project_1 to associate the variable with the project, type set to \"AmazonWebServicesAccount\" to specify the variable type, name set to \"AWS\" to name the variable, value set to the ID of the AWS account from the aws_account data source. Define a scope block with environments set to a list containing the ID of the environment from the test data source to scope the variable to that environment.\n\nCreate a resource \"octopusdeploy_variable\" named \"azure_account_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of project_1 to associate the variable with the project, type set to \"AzureAccount\" to specify the variable type, name set to \"Azure\" to name the variable, value set to the ID of the Azure account from the azure_account data source. Define a scope block with environments set to a list containing the ID of the environment from the test data source to scope the variable to that environment.\n\nCreate an output named \"octopus_project_1\" with value set to the ID of the project_1 resource.\n\nCreate"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"test\" {\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_accounts\" \"aws_account\" {\n  account_type = \"AmazonWebServicesAccount\"\n  ids          = []\n  partial_name = \"AWS Account\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_accounts\" \"azure_account\" {\n  account_type = \"AzureServicePrincipal\"\n  ids          = []\n  partial_name = \"Azure Account\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"amazon_web_services_account_variable\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"AmazonWebServicesAccount\"\n  name      = \"AWS\"\n  value     = data.octopusdeploy_accounts.aws_account.accounts[0].id\n  scope {\n    environments = [data.octopusdeploy_environments.test.environments[0].id]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"azure_account_variable\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"AzureAccount\"\n  name      = \"Azure\"\n  value     = data.octopusdeploy_accounts.azure_account.accounts[0].id\n  scope {\n    environments = [data.octopusdeploy_environments.test.environments[0].id]\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: \n- For \"development_environment\": name set to \"Development\" as the name of this resource, description set to \"A test environment\" as the description of this environment, allow_dynamic_infrastructure set to true, use_guided_failure set to false; nested blocks: jira_extension_settings with environment_type set to \"unmapped\" to provide extension settings for the Jira integration, jira_service_management_extension_settings with is_enabled set to true to provide extension settings for the Jira Service Management integration, servicenow_extension_settings with is_enabled set to true to provide extension settings for the ServiceNow integration.\n- For \"test_environment\": name set to \"Test\", description set to \"A test environment\", allow_dynamic_infrastructure set to true, use_guided_failure set to false.\n- For \"production_environment\": name set to \"Production\", description set to \"A test environment\", allow_dynamic_infrastructure set to true, use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items, take set to 1 to take one item.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, skip set to 0 to skip zero items, take set to 1 to take one item.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage a variable in Octopus Deploy with attributes: owner_id set to the ID of the project \"deploy_frontend_project\", type set to \"String\" as the type of variable, name set to \"Test\" as the name of this resource, value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage a project in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, description set to \"Test project\" as the description of this project, auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from \"lifecycle_default_lifecycle\" data source, project_group_id set to the ID of \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\", space_id set to a variable \"octopus_space_id\", included_library_variable_sets set to an empty list; nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage a deployment process in Octopus Deploy with attribute: project_id set to the ID of \"deploy_frontend_project\".\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of steps in a deployment process with attributes: process_id set to the ID of \"test\" process, steps set to a list containing the ID of \"parent_step\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"parent_step\" to manage a single step of a deployment process with attributes: name set to \"Parent Step\" as the name of this resource, type set to \"Placeholder\" as the execution type of the step, process_id set to the ID of \"test\" process, condition set to \"Variable\" indicating when to run the step, package_requirement set to \"LetOctopusDecide"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.parent_step.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"parent_step\" {\n  name                  = \"Parent Step\"\n  type                  = \"Placeholder\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Variable\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n    \"Octopus.Step.ConditionVariableExpression\" = \"#{IsTrue}\"\n    \"Octopus.Action.TargetRoles\" = \"cloud\"\n  }\n}\n\nresource \"octopusdeploy_process_child_steps_order\" \"process_child_step_order_tfproviderv1_parent_step\" {\n  process_id = octopusdeploy_process.test.id\n  parent_id  = octopusdeploy_process_step.parent_step.id\n  children      = [\n    octopusdeploy_process_child_step.process_child_step_test_child_step_1.id,\n    octopusdeploy_process_child_step.process_child_step_test_child_step_2.id]\n}\n\nresource \"octopusdeploy_process_child_step\" \"process_child_step_test_child_step_1\" {\n  name                  = \"Child Step 1\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  parent_id = octopusdeploy_process_step.parent_step.id\n  channels              = null\n  condition             = \"Success\"\n  environments          = [\"${octopusdeploy_environment.production_environment.id}\"]\n  excluded_environments = null\n  is_required           = true\n  notes                 = \"notes\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.AutoRetry.MaximumCount\" = \"3\"\n    \"Octopus.Action.AutoRetry.MinimumBackoff\" = \"15\"\n    \"Octopus.Action.ExecutionTimeout.Minutes\" = \"10\"\n    \"OctopusUseBundledTooling\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n  }\n}\n\nresource \"octopusdeploy_process_child_step\" \"process_child_step_test_child_step_2\" {\n  name                  = \"Child Step 2\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  parent_id = octopusdeploy_process_step.parent_step.id\n  channels              = null\n  condition             = \"Variable\"\n  environments          = [\"${octopusdeploy_environment.development_environment.id}\"]\n  excluded_environments = null\n  is_required           = true\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.AutoRetry.MaximumCount\" = \"3\"\n    \"OctopusUseBundledTooling\" = \"False\"\n    \"Octopus.Action.ExecutionTimeout.Minutes\" = \"10\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.ConditionVariableExpression\" = \"#{IsTrue}\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.AutoRetry.MinimumBackoff\" = \"15\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook_runbookcac_test\" {\n  name                        = \"Runbook\"\n  project_id                  = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  environment_scope           = \"All\"\n  environments                = []\n  force_package_download      = false\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  description                 = \"\"\n  multi_tenancy_mode          = \"Untenanted\"\n\n  retention_policy {\n    quantity_to_keep = 100\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = true\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"None\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"process_runbookcac_test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook_runbookcac_test.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_runbookcac_test\" {\n  process_id = \"${octopusdeploy_process.process_runbookcac_test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_runbookcac_test_parent_step.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_runbookcac_test_parent_step\" {\n  name                  = \"Parent Step\"\n  type                  = \"Placeholder\"\n  process_id            = \"${octopusdeploy_process.process_runbookcac_test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_process_child_steps_order\" \"process_child_step_order_runbookcac_test_parent_step\" {\n  process_id = \"${octopusdeploy_process.process_runbookcac_test.id}\"\n  parent_id  = \"${octopusdeploy_process_step.process_step_runbookcac_test_parent_step.id}\"\n  children      = [\"${octopusdeploy_process_child_step.process_child_step_runbookcac_test_child_step_1.id}\", \"${octopusdeploy_process_child_step.process_child_step_runbookcac_test_child_step_2.id}\"]\n}\n\nresource \"octopusdeploy_process_child_step\" \"process_child_step_runbookcac_test_child_step_1\" {\n  name                  = \"Child Step 1\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_runbookcac_test.id}\"\n  parent_id = octopusdeploy_process_step.process_step_runbookcac_test_parent_step.id\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"OctopusUseBundledTooling\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n  }\n}\n\nresource \"octopusdeploy_process_child_step\" \"process_child_step_runbookcac_test_child_step_2\" {\n  name                  = \"Child Step 2\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_runbookcac_test.id}\"\n  parent_id = octopusdeploy_process_step.process_step_runbookcac_test_parent_step.id\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"OctopusUseBundledTooling\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of each environment, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_azure_service_fabric_cluster_deployment_target\" named \"target_service_fabric\" to manage Azure service fabric cluster deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the development environment as a list of environment IDs associated with this resource, name set to \"Service Fabric\" as the name of this resource, roles set to [\"cloud\"], connection_endpoint set to \"http://endpoint\" as the connection endpoint, aad_client_credential_secret set to an empty string, aad_credential_type set to \"UserCredential\", aad_user_credential_password set to the sensitive variable \"target_service_fabric\", aad_user_credential_username set to \"username\", certificate_store_location set to an empty string, certificate_store_name set to an empty string, client_certificate_variable set to an empty string, health_status set to \"Unhealthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the default machine policy, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this resource.\n\nCreate a variable \"target_service_fabric\" of type string, nullable, sensitive, with description \"The secret variable value associated with the target \\\"Service Fabric\\\"\"."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\nresource \"octopusdeploy_azure_service_fabric_cluster_deployment_target\" \"target_service_fabric\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Service Fabric\"\n  roles                             = [\"cloud\"]\n  connection_endpoint               = \"http://endpoint\"\n  aad_client_credential_secret      = \"\"\n  aad_credential_type               = \"UserCredential\"\n  aad_user_credential_password      = \"${var.target_service_fabric}\"\n  aad_user_credential_username      = \"username\"\n  certificate_store_location        = \"\"\n  certificate_store_name            = \"\"\n  client_certificate_variable       = \"\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n}\nvariable \"target_service_fabric\" {\n  type        = string\n  nullable    = true\n  sensitive   = true\n  description = \"The secret variable value associated with the target \\\"Service Fabric\\\"\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_aws_account\" named \"account_aws_account\" to manage AWS accounts in Octopus Deploy with attributes: name set to \"AWS Account\" as the name of this AWS account, description set to an empty string as the user-friendly description, environments set to null as the list of environment IDs, tenant_tags set to an empty list as the list of tenant tags, tenants set to null as the list of tenant IDs, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, access_key set to \"ABCDEFGHIJKLMNOPQRST\" as the access key associated with this AWS account, and secret_key set to \"secretgoeshere\" as the secret key associated with this resource.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_eks\" to manage Kubernetes cluster deployment targets in Octopus Deploy with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" environment, name set to \"Test\" as the name of this resource, roles set to a list containing \"eks\" as the roles assigned to this target, cluster_certificate set to an empty string, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string, skip_tls_verification set to true to skip TLS verification, tenant_tags set to an empty list as the list of tenant tags, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, tenants set to an empty list as the list of tenant IDs, thumbprint set to an empty string, uri set to an empty string, and default_worker_pool_id set to the ID of the \"workerpool_docker\" static worker pool. Include a container block with feed_id and image set to empty strings. Include an aws_account_authentication block with account_id set to the ID of the \"account_aws_account\" AWS account, cluster_name set to \"clustername\", assume_role set to false, and use_instance_role set to false.\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \"Docker\" as the name of this static worker pool, description set to \"A test worker pool\" as the description of this static worker pool, is_default set to false, and sort_order set to 3 as the order number to sort this"},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_aws_account\" \"account_aws_account\" {\n  name                              = \"AWS Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  access_key                        = \"ABCDEFGHIJKLMNOPQRST\"\n  secret_key                        = \"secretgoeshere\"\n}\n\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_eks {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [\"${octopusdeploy_environment.test_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n  default_worker_pool_id            = octopusdeploy_static_worker_pool.workerpool_docker.id\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  aws_account_authentication {\n    account_id        = \"${octopusdeploy_aws_account.account_aws_account.id}\"\n    cluster_name      = \"clustername\"\n    assume_role       = false\n    use_instance_role = false\n  }\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_s3_feed\" named \"s3\" to manage an Amazon S3 Bucket feed in Octopus Deploy with attributes: name set to \"S3\" to specify the name of this resource, use_machine_credentials set to false to not use credentials configured on the worker, access_key set to \"given_access_key\" as the AWS access key to use when authenticating against Amazon Web Services, and secret_key set to \"some_secret_key\" as the AWS secret key to use when authenticating against Amazon Web Services."},{"role":"assistant","content":"resource \"octopusdeploy_s3_feed\" \"s3\" {\n  name = \"S3\"\n  use_machine_credentials = false\n  access_key = \"given_access_key\"\n  secret_key = \"some_secret_key\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_script_module\" named \"library_variable_set_test2\" to manage a script module with attributes: description set to \"The description of this script module.\" with value \"Test script module\", name set to \"The name of this resource.\" with value \"Script Module\", and a script block containing the body \"The body of this script module.\" set to 'echo \"hi\"' and syntax \"The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.\" set to \"PowerShell\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group with attributes: name \"The name of this resource.\" set to \"Test\" and description \"The description of this project group.\" set to \"Test Description\".\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids \"A list of lifecycle IDs to filter by.\" set to null, partial_name \"A partial name to filter lifecycles by.\" set to \"Default Lifecycle\", skip \"A filter to specify the number of items to skip in the response.\" set to 0, and take \"A filter to specify the number of items to take (or return) in the response.\" set to 1.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release (not in schema, assumed boolean) set to false, default_guided_failure_mode (not in schema) set to \"EnvironmentDefault\", default_to_skip_if_already_installed (not in schema) set to false, description \"The description of this project.\" set to \"Test project\", discrete_channel_release \"Treats releases of different channels to the same environment as a separate deployment dimension\" set to false, is_disabled (not in schema) set to false, is_discrete_channel_release \"Treats releases of different channels to the same environment as a separate deployment dimension\" set to false, is_version_controlled (not in schema) set to false, lifecycle_id \"The lifecycle ID associated with this project.\" set to the id of the first lifecycle from data.octopusdeploy_lifecycles.lifecycle_default_lifecycle, name \"The name of this resource.\" set to \"Test\", project_group_id \"The project group ID associated with this project.\" set to the id of octopusdeploy_project_group.project_group_test, tenanted_deployment_participation \"The tenanted deployment mode of the resource. Valid account types are `Untenanted`, `TenantedOrUntenanted`, or `Tenanted`.\" set to \"Untenanted\", space_id \"The space ID associated with this project.\" set to var.octopus_space_id, included_library_variable_sets \"The list of included library variable set IDs.\" set to a list containing octopusdeploy_script_module.library_variable_set_test2.id.\n\nInclude a versioning_strategy block with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nInclude a connectivity_policy block with attributes: allow_deployments_to_no_targets (not in schema) set to false, exclude_unhealthy_targets (not in schema) set to false, and skip_machine_behavior (not in schema) set to \"SkipUnavailableMachines\"."},{"role":"assistant","content":"resource \"octopusdeploy_script_module\" \"library_variable_set_test2\" {\n  description = \"Test script module\"\n  name        = \"Script Module\"\n\n  script {\n    body   = \"echo \\\"hi\\\"\"\n    syntax = \"PowerShell\"\n  }\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [octopusdeploy_script_module.library_variable_set_test2.id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_helm_feed\" named \"feed_helm\" to manage a Helm Feed in Octopus Deploy with attributes: name set to \"Helm\" as the name of this resource, password set to \"password\" as the password associated with this resource, feed_uri set to \"https://charts.helm.sh/stable/\", username set to \"username\" as the username associated with this resource, and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", and feed_uri set to \"https://index.docker.io\".\n\nCreate two resources \"octopusdeploy_project_deployment_target_trigger\" named \"projecttrigger_test1\" and \"projecttrigger_test2\" to attach deployment target triggers to projects with attributes: name set to \"Test 1\" and \"Test 2\" respectively as the name of this resource, project_id set to the IDs of projects \"project_1\" and \"project_2\" respectively, event_categories set to empty lists to apply event category filters, environment_ids set to empty lists to apply environment id filters, event_groups set to [\"MachineAvailableForDeployment\"] to apply event group filters, roles set to empty lists to apply event role filters, and should_redeploy set to false to disable redeployment if targets are up-to-date.\n\nCreate two resources \"octopusdeploy_tenant\" named \"tenant_team_a\" and \"tenant_team_b\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" and \"Team B\" respectively as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"tag1/a\", \"tag1/b\"] as a list of tenant tags associated with this resource, and depends_on set to the tags \"tag_a\" and \"tag_b\".\n\nCreate two resources \"octopusdeploy_tenant_project\" named \"tenant_project\" and \"tenantb_project\" to associate tenants with projects and environments with attributes: environment_ids set to the IDs of environments \"test_environment\", \"development_environment\", and \"production_environment\" as the environment IDs associated with this tenant, project_id set to the IDs of projects \"project_1\" and \"project_2\" respectively, and tenant_id set to the IDs of tenants \"tenant_team_a\" and \"tenant_team_b\" respectively.\n\nCreate a resource \"octopusdeploy_certificate\" named \"certificate_kind_ca\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of file \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as a list of environment IDs associated with this resource, notes set to \"A test certificate\", tenant_tags set to an empty list as a list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this certificate.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate four resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", \"production_environment\", and \"blah_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", \"Production\", and \"Blah\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" to filter by name, ids set to null to filter by IDs, skip set to 0 to skip zero items in the response, and take set to 1 to take"},{"role":"assistant","content":"resource \"octopusdeploy_helm_feed\" \"feed_helm\" {\n  name                                 = \"Helm\"\n  password                             = \"password\"\n  feed_uri                             = \"https://charts.helm.sh/stable/\"\n  username                             = \"username\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_deployment_target_trigger\" \"projecttrigger_test1\" {\n  name             = \"Test 1\"\n  project_id       = \"${octopusdeploy_project.project_1.id}\"\n  event_categories = []\n  environment_ids  = []\n  event_groups     = [\"MachineAvailableForDeployment\"]\n  roles            = []\n  should_redeploy  = false\n}\n\nresource \"octopusdeploy_project_deployment_target_trigger\" \"projecttrigger_test2\" {\n  name             = \"Test 2\"\n  project_id       = \"${octopusdeploy_project.project_2.id}\"\n  event_categories = []\n  environment_ids  = []\n  event_groups     = [\"MachineAvailableForDeployment\"]\n  roles            = []\n  should_redeploy  = false\n}\nresource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenant_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.project_1.id\n  tenant_id = octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_team_b\" {\n  name        = \"Team B\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenantb_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.project_2.id\n  tenant_id    = octopusdeploy_tenant.tenant_team_b.id\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"blah_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Blah\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = true\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [octopusdeploy_library_variable_set.octopus_library_variable_set.id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n\n  git_library_persistence_settings {\n    git_credential_id  = \"${octopusdeploy_git_credential.gitcredential_matt.id}\"\n    url                = \"https://github.com/mcasperson/octogittest.git\"\n    base_path          = \".octopus/integrationtest-${timestamp()}\"\n    default_branch     = \"main\"\n    protected_branches = [\"test\"]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_variable\" \"string_variable2\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"Test2\"\n  value     = \"PlainText\"\n  scope {\n    environments = [octopusdeploy_environment.development_environment.id]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"tenantscoped\"\n  value    = \"test\"\n  scope {\n    tenant_tags = [\"tag1/a\"]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"string_variable3\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"Test3\"\n  value     = \"PlainText\"\n  scope {\n    environments = [octopusdeploy_environment.test_environment.id]\n  }\n}\n\nresource \"octopusdeploy_variable\" \"string_variable4\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"HelmFeed\"\n  value     = octopusdeploy_helm_feed.feed_helm.id\n}\n\nresource \"octopusdeploy_variable\" \"string_variable5\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"UsernamePassword\"\n  value     = octopusdeploy_username_password_account.account_gke.id\n}\n\nresource \"octopusdeploy_variable\" \"string_variable6\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"WorkerPool\"\n  value     = octopusdeploy_static_worker_pool.workerpool_docker.id\n}\n\nresource \"octopusdeploy_variable\" \"string_variable7\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"Certificate\"\n  value     = octopusdeploy_certificate.certificate_kind_ca.id\n}\n\nresource \"octopusdeploy_variable\" \"string_variable8\" {\n  owner_id  = octopusdeploy_project.project_1.id\n  type      = \"String\"\n  name      = \"TestNull\"\n  value     = null\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.project_2.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.hello_world.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"hello_world\" {\n  name                  = \"Hello world (using Bash)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = { package1 = { acquisition_location = \"ExecutionTarget\", feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\", id = null, package_id = \"package1\", properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" } } }\n  slug                  = \"hello-world\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo 'Hello world, using Bash'\\n\\n#TODO: Experiment with steps of your own :)\\n\\necho '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.Syntax\" = \"Bash\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n  }\n  properties            = {\n\n  }\n}\n\nresource \"octopusdeploy_channel\" \"channel1\" {\n  name        = \"Test 1\"\n  project_id  = octopusdeploy_project.project_1.id\n  description = \"Test channel\"\n  is_default  = true\n  lifecycle_id = octopusdeploy_lifecycle.simple_lifecycle.id\n}\n\nresource \"octopusdeploy_channel\" \"channel2\" {\n  name        = \"Test 2\"\n  project_id  = octopusdeploy_project.project_2.id\n  description = \"Test channel\"\n  is_default  = true\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag_set\" \"tagset_tag2\" {\n  name        = \"tag2\"\n  description = \"Test tagset\"\n}\n\nresource \"octopusdeploy_tag\" \"tag_c\" {\n  name        = \"c\"\n  color       = \"#333333\"\n  description = \"tag c\"\n  tag_set_id = octopusdeploy_tag_set.tagset_tag2.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_d\" {\n  name        = \"d\"\n  color       = \"#333333\"\n  description = \"tag d\"\n  tag_set_id = octopusdeploy_tag_set.tagset_tag2.id\n}\nresource \"octopusdeploy_library_variable_set\" \"octopus_library_variable_set\" {\n  name = \"Test\"\n  description = \"Test variable set\"\n}\n\nresource \"octopusdeploy_library_variable_set\" \"octopus_library_variable_set2\" {\n  name = \"Test2\"\n  description = \"Test variable set\"\n}\n\nresource \"octopusdeploy_variable\" \"octopus_admin_api_key\" {\n  name = \"Test.Variable\"\n  type = \"String\"\n  description = \"Test variable\"\n  is_sensitive = false\n  is_editable = true\n  owner_id = octopusdeploy_library_variable_set.octopus_library_variable_set.id\n  value = \"test\"\n}\nresource \"octopusdeploy_lifecycle\" \"simple_lifecycle\" {\n  description = \"A test lifecycle\"\n  name        = \"Simple\"\n\n  release_retention_policy {\n    quantity_to_keep    = 1\n\n    unit                = \"Days\"\n  }\n\n  tentacle_retention_policy {\n    quantity_to_keep    = 30\n\n    unit                = \"Items\"\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.development_environment.id]\n    name                         = octopusdeploy_environment.development_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.test_environment.id]\n    name                         = octopusdeploy_environment.test_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.production_environment.id]\n    name                         = octopusdeploy_environment.production_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n}\n\nresource \"octopusdeploy_lifecycle\" \"simple_lifecycle2\" {\n  description = \"A test lifecycle\"\n  name        = \"Simple2\"\n\n  release_retention_policy {\n    quantity_to_keep    = 1\n\n    unit                = \"Days\"\n  }\n\n  tentacle_retention_policy {\n    quantity_to_keep    = 30\n\n    unit                = \"Items\"\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.development_environment.id]\n    name                         = octopusdeploy_environment.development_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.test_environment.id]\n    name                         = octopusdeploy_environment.test_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.production_environment.id]\n    name                         = octopusdeploy_environment.production_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n}\nresource \"octopusdeploy_username_password_account\" \"account_gke\" {\n  description                       = \"A test account\"\n  name                              = \"GKE\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  username                          = \"admin\"\n  password                          = \"secretgoeshere\"\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\nresource \"octopusdeploy_git_credential\" \"gitcredential_matt\" {\n  name     = \"matt\"\n  type     = \"UsernamePassword\"\n  username = \"mcasperson\"\n  password = \"${var.gitcredential_matt}\"\n}\n\nvariable \"gitcredential_matt\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret variable value associated with the git credential \\\"matt\\\"\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 in nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 in nanoseconds, and connection_retry_time_limit set to 300000000000 in nanoseconds. Define a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 in nanoseconds. Define a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Define a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 in nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and script_body empty, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Define a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_k8s\" to manage Kubernetes cluster deployment targets with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" environment, name set to \"Test\" as the name of this resource, roles set to [\"eks\"], cluster_certificate set to an empty string, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string, skip_tls_verification set to true, tenant_tags set to an empty list, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, tenants set to an empty list, thumbprint set to an empty string, and uri set to an empty string. Define a container block with feed_id and image set to empty strings. Define an authentication block with account_id set to the ID of the \"account_autopilot_service_account\" token account.\n\nCreate a resource \"octopusdeploy_token_account\" named \"account_autopilot_service_account\" to manage token accounts in Octopus Deploy with attributes: description set to \"A test account\" as the description of this token account, name set to \"Token\" as the name of this resource, environments set to null as a list of environment IDs, tenant_tags set to an empty list, tenants set to null as a list of tenant IDs, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, and token set to \"secretgoeshere\" as the token of this resource."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_k8s {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  authentication {\n    account_id   = octopusdeploy_token_account.account_autopilot_service_account.id\n  }\n}\nresource \"octopusdeploy_token_account\" \"account_autopilot_service_account\" {\n  description                       = \"A test account\"\n  name                              = \"Token\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  token                             = \"secretgoeshere\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_channel\" named \"backend_mainline\" to manage channels in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, project_id set to the ID of the associated project, description set to \"The description of this channel.\" with value \"Test channel\", is_default set to true indicating this is the default channel for the associated project, and depends_on set to the list of dependent resources. Define a rule block (a list of rules associated with this channel) with attribute tag set to \"^$\" and an action_package block (at least one required) with deployment_action set to \"Test\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"The description of this project group.\" with value \"Test Description\".\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" as a filter to search by name, ids set to null as a filter to search by a list of IDs, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" as a filter to search by feed type, ids set to null as a filter to search by a list of IDs, partial_name set to \"\" as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"The description of this project.\" with value \"Test project\", discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the name of this resource, project_group_id set to the ID of the associated project group, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable octopus_space_id, included_library_variable_sets set to an empty list. Define a versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\". Define a connectivity_policy block with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"process_cloudformation_step\" to manage deployment processes in Octopus Deploy with attribute project_id set to the ID of the associated project.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_cloudformation_step\" to manage order of steps of a deployment process in Octopus Deploy with attributes: process_id set to the ID of the associated process, and steps set to a list containing the ID of the process step.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_test\" to manage a single step of a deployment process in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, type set to \"Octopus.AwsRunCloudFormation\" as the execution type of the step, process_id set to the ID of the associated process, channels set to null as a set of channels associated with this step, condition set to \"Success\" indicating when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" indicating whether to run this step before or"},{"role":"assistant","content":"resource \"octopusdeploy_channel\" \"backend_mainline\" {\n  name        = \"Test\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  description = \"Test channel\"\n  depends_on  = [octopusdeploy_project.deploy_frontend_project,\n    octopusdeploy_process_steps_order.process_cloudformation_step,\n    octopusdeploy_process.process_cloudformation_step]\n  is_default  = true\n  rule {\n    tag = \"^$\"\n    action_package {\n      deployment_action = \"Test\"\n    }\n  }\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"process_cloudformation_step\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"process_cloudformation_step\" {\n  process_id = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test.id}\"]\n}\nresource \"octopusdeploy_process_step\" \"process_step_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.AwsRunCloudFormation\"\n  process_id            = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"test\",\n    properties = { SelectionMode = \"immediate\" }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Aws.Region\" = \"us-east-1\"\n    \"Octopus.Action.Package.JsonConfigurationVariablesTargets\" = \"a.yml\"\n    \"Octopus.Action.Aws.AssumeRole\" = \"False\"\n    \"Octopus.Action.AwsAccount.Variable\" = \"AWS Account\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Aws.CloudFormationStackName\" = \"test\"\n    \"Octopus.Action.Aws.WaitForCompletion\" = \"True\"\n    \"Octopus.Action.AwsAccount.UseInstanceRole\" = \"False\"\n    \"Octopus.Action.Aws.CloudFormationTemplate\" = \"a.yml\"\n    \"Octopus.Action.Aws.TemplateSource\" = \"Package\"\n  }\n  properties            = {\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate a resource \"octopusdeploy_certificate\" named \"certificate_kind_ca\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of file \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\", environments set to a list containing the ID of the environment \"test_environment\", notes set to \"A test certificate\" as a user-friendly description, tenant_tags set to an empty list, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, and tenants set to an empty list.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate four resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", \"production_environment\", and \"blah_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", \"Production\", and \"Blah\" as the name of this resource, and use_guided_failure set to false.\n\nCreate two resources \"octopusdeploy_project\" named \"project_1\" and \"project_2\" to manage projects in Octopus Deploy each with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set respectively to \"Test project\" and \"Test project 2\" as the description of this project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of lifecycles \"simple_lifecycle\" and \"simple_lifecycle2\" respectively, name set respectively to \"Test\" and \"Test 2\" as the name of this resource, project_group_id set to the ID of project group \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\", included_library_variable_sets set to empty lists, and versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\". Include a connectivity_policy block with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_variable\" named \"scoped_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of project \"project_1\" as the ID of the project this variable belongs to, type set to \"String\" as the type of variable, name set to \"test\" as the name of this resource, value set to \"test\" as the value of this variable, and a scope block with machines set to a list of IDs of various deployment targets: azure service fabric cluster, azure web app, cloud region, kubernetes cluster, listening tentacle, offline package drop, polling tentacle, and ssh connection deployment targets. This resource depends on the process \"test\".\n\nCreate an output \"octopus_project_1\" with value set to the ID of project \"project"},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"blah_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Blah\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = octopusdeploy_lifecycle.simple_lifecycle.id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"test\"\n  value    = \"test\"\n  scope {\n    machines = [\n      octopusdeploy_azure_service_fabric_cluster_deployment_target.target_service_fabric.id,\n      octopusdeploy_azure_web_app_deployment_target.target_web_app.id,\n      octopusdeploy_cloud_region_deployment_target.target_region1.id,\n      octopusdeploy_kubernetes_cluster_deployment_target.test_eks.id,\n      octopusdeploy_listening_tentacle_deployment_target.listening.id,\n      octopusdeploy_offline_package_drop_deployment_target.target_offlineoffline.id,\n      octopusdeploy_polling_tentacle_deployment_target.polling.id,\n      octopusdeploy_ssh_connection_deployment_target.ssh.id\n    ]\n  }\n\n  depends_on = [octopusdeploy_process.test]\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = octopusdeploy_lifecycle.simple_lifecycle2.id\n  name                                 = \"Test 2\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.project_1.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\nresource \"octopusdeploy_aws_account\" \"account_aws_account\" {\n  name                              = \"AWS Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  access_key                        = \"ABCDEFGHIJKLMNOPQRST\"\n  secret_key                        = \"secretgoeshere\"\n}\n\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_eks{\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = octopusdeploy_certificate.certificate_kind_ca.id\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = false\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  endpoint {\n    communication_style    = \"Kubernetes\"\n  }\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  aws_account_authentication {\n    account_id        = octopusdeploy_aws_account.account_aws_account.id\n    cluster_name      = \"clustername\"\n    assume_role       = false\n    use_instance_role = false\n  }\n}\n\nresource \"octopusdeploy_cloud_region_deployment_target\" \"target_region1\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"CloudRegion\"\n  roles                             = [\"cloud\"]\n  default_worker_pool_id            = \"\"\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n}\n\nresource \"octopusdeploy_ssh_key_account\" \"account_ec2_sydney\" {\n  name                              = \"ec2 sydney\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  private_key_file                  = \"whatever\"\n  username                          = \"ec2-user\"\n  private_key_passphrase            = \"whatever\"\n}\n\nresource \"octopusdeploy_ssh_connection_deployment_target\" \"ssh\" {\n  account_id            = octopusdeploy_ssh_key_account.account_ec2_sydney.id\n  environments          = [octopusdeploy_environment.development_environment.id]\n  fingerprint           = \"d5:6b:a3:78:fa:fe:f5:ad:d4:79:4a:57:35:6a:32:ef\"\n  host                  = \"3.25.215.87\"\n  name                  = \"Ssh\"\n  roles                 = [\"vm\"]\n  dot_net_core_platform = \"linux-x64\"\n  machine_policy_id     = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n}\n\nresource \"octopusdeploy_listening_tentacle_deployment_target\" \"listening\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Listening\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"https://tentacle/\"\n  thumbprint                        = \"55E05FD1B0F76E60F6DA103988056CE695685FD1\"\n  is_disabled                       = false\n  is_in_process                     = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n}\n\nresource \"octopusdeploy_polling_tentacle_deployment_target\" \"polling\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Polling\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"poll://abcdefghijklmnopqrst/\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"PowerShell\"\n  shell_version                     = \"5.1.22621.1\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n\n  thumbprint = \"1854A302E5D9EAC1CAA3DA1F5249F82C28BB2B86\"\n}\n\nresource \"octopusdeploy_offline_package_drop_deployment_target\" \"target_offlineoffline\" {\n  applications_directory            = \"c:\\\\temp\"\n  working_directory                 = \"c:\\\\temp\"\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Offline\"\n  roles                             = [\"offline\"]\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\n\nresource \"octopusdeploy_azure_subscription_account\" \"account_subscription\" {\n  description                       = \"A test account\"\n  name                              = \"Subscription\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  storage_endpoint_suffix           = \"whatever\"\n  subscription_id                   = \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\"\n  azure_environment                 = \"AzureCloud\"\n  management_endpoint               = \"whatever\"\n  certificate                       = file(\"dummycert2.txt\")\n}\n\nresource \"octopusdeploy_azure_service_fabric_cluster_deployment_target\" \"target_service_fabric\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"ServiceFabric\"\n  roles                             = [\"cloud\"]\n  connection_endpoint               = \"http://endpoint\"\n  aad_client_credential_secret      = \"\"\n  aad_credential_type               = \"UserCredential\"\n  aad_user_credential_password      = \"passwword\"\n  aad_user_credential_username      = \"username\"\n  certificate_store_location        = \"\"\n  certificate_store_name            = \"\"\n  client_certificate_variable       = \"\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n}\n\nresource \"octopusdeploy_azure_service_principal\" \"account_sales_account\" {\n  name                              = \"Sales Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  application_id                    = \"08a4a027-6f2a-4793-a0e5-e59a3c79189f\"\n  password                          = \"Password\"\n  subscription_id                   = \"3b50dcf4-f74d-442e-93cb-301b13e1e2d5\"\n  tenant_id                         = \"3d13e379-e666-469e-ac38-ec6fd61c1166\"\n}\n\nresource \"octopusdeploy_azure_web_app_deployment_target\" \"target_web_app\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"WebApp\"\n  roles                             = [\"cloud\"]\n  account_id                        = \"${octopusdeploy_azure_service_principal.account_sales_account.id}\"\n  resource_group_name               = \"mattc-webapp\"\n  web_app_name                      = \"mattc-webapp\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  web_app_slot_name                 = \"slot1\"\n}\nresource \"octopusdeploy_lifecycle\" \"simple_lifecycle\" {\n  description = \"A test lifecycle\"\n  name        = \"Simple\"\n\n  release_retention_policy {\n    quantity_to_keep    = 1\n\n    unit                = \"Days\"\n  }\n\n  tentacle_retention_policy {\n    quantity_to_keep    = 30\n\n    unit                = \"Items\"\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.development_environment.id]\n    name                         = octopusdeploy_environment.development_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.test_environment.id]\n    name                         = octopusdeploy_environment.test_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.production_environment.id]\n    name                         = octopusdeploy_environment.production_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n}\n\nresource \"octopusdeploy_lifecycle\" \"simple_lifecycle2\" {\n  description = \"A test lifecycle\"\n  name        = \"Simple2\"\n\n  release_retention_policy {\n    quantity_to_keep    = 1\n\n    unit                = \"Days\"\n  }\n\n  tentacle_retention_policy {\n    quantity_to_keep    = 30\n\n    unit                = \"Items\"\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.development_environment.id]\n    name                         = octopusdeploy_environment.development_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.test_environment.id]\n    name                         = octopusdeploy_environment.test_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 1\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n\n  phase {\n    automatic_deployment_targets = []\n    optional_deployment_targets  = [octopusdeploy_environment.production_environment.id]\n    name                         = octopusdeploy_environment.production_environment.name\n\n    release_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Days\"\n    }\n\n    tentacle_retention_policy {\n      quantity_to_keep    = 30\n\n      unit                = \"Items\"\n    }\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Define a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Define a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Define a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and script_body empty, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Define a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate a resource \"octopusdeploy_certificate\" named \"certificate_kind_ca\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of the file \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as a list of environment IDs associated with this resource, notes set to \"A test certificate\", tenant_tags set to an empty list as a list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this certificate.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_k8s\" to manage Kubernetes cluster deployment targets in Octopus Deploy with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the id of the \"test_environment\" resource as a list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"eks\"] as the roles assigned to this target, cluster_certificate set to an empty string as the cluster certificate, machine_policy_id set to the id of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string as the Kubernetes namespace, skip_tls_verification set to true to skip TLS verification, tenant_tags set to an empty list as a list of tenant tags associated with this target, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this target, thumbprint set to an empty string as the thumbprint, and uri set to an empty string as the URI. Define a container block with feed_id and image set to empty strings. Define a certificate_authentication block with client_certificate set to the id of the \"certificate_kind_ca\" resource."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_k8s {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  certificate_authentication {\n    client_certificate    = octopusdeploy_certificate.certificate_kind_ca.id\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds, and connection_retry_time_limit set to 300000000000 nanoseconds. Include a machine_cleanup_policy block (max 1) with attribute delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block (max 1) with attribute machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block (max 1) with attributes health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, and health_check_type set to \"RunScript\". Inside it, include a bash_health_check_policy block (min 1, max 1) with run_type set to \"Inline\" and script_body set to an empty string. Also include a powershell_health_check_policy block (min 1, max 1) with run_type set to \"Inline\" and script_body set to the provided PowerShell script. Include a machine_update_policy block (max 1) with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_gcp_account\" named \"account_google\" to manage GCP accounts in Octopus Deploy with attributes: description set to \"A test account\" as a user-friendly description of this GCP account, name set to \"Google\" as the name of this GCP account, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and json_key set to \"secretgoeshere\" as the JSON key associated with this GCP account.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_kubernetes_cluster_deployment_target\" named \"test_k8s\" to manage Kubernetes cluster deployment targets in Octopus Deploy with attributes: cluster_url set to \"https://cluster\" as the URL of the Kubernetes cluster, environments set to a list containing the ID of the \"test_environment\" octopusdeploy_environment resource as the list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"eks\"] as the roles associated with this resource, cluster_certificate set to an empty string as the cluster certificate, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, namespace set to an empty string as the namespace, skip_tls_verification set to true to skip TLS verification, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, tenants set to an empty list as a list of tenant IDs associated with this resource, thumbprint set to an empty string as the thumbprint, and uri set to an empty string as the URI. Include a container block with feed_id and image set to empty strings. Include a gcp_account_authentication block with account_id set to the ID of the \"account_google\" octopusdeploy_gcp_account resource, cluster_name set to \"mycluster\", project set to \"myproject\", and region set to \"region\"."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_gcp_account\" \"account_google\" {\n  description                       = \"A test account\"\n  name                              = \"Google\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  json_key                          = \"secretgoeshere\"\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_k8s {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  gcp_account_authentication {\n    account_id   = octopusdeploy_gcp_account.account_google.id\n    cluster_name = \"mycluster\"\n    project      = \"myproject\"\n    region       = \"region\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 in nanoseconds, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 in nanoseconds, and connection_retry_time_limit set to 300000000000 in nanoseconds. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 in nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 in nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\", \"Test\", and \"Production\" respectively as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_ssh_key_account\" named \"account_ec2_sydney\" to manage SSH key accounts in Octopus Deploy with attributes: name set to \"ec2 sydney\" as the name of this resource, description set to an empty string as the description of this SSH key account, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to null as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, private_key_file set to the variable \"account_ec2_sydney_cert\", username set to \"ec2-user\" as the username associated with this resource, and private_key_passphrase set to the variable \"account_ec2_sydney\".\n\nCreate variables \"account_ec2_sydney\" and \"account_ec2_sydney_cert\" of type string, not nullable, sensitive, with descriptions \"The password associated with the certificate for account ec2 sydney\" and \"The certificate file for account ec2 sydney\" respectively.\n\nCreate a resource \"octopusdeploy_ssh_connection_deployment_target\" named \"target_3_25_215_87\" to manage SSH connection deployment targets in Octopus Deploy with attributes: account_id set to the ID of \"octopusdeploy_ssh_key_account.account_ec2_sydney\", environments set to a list containing the ID of \"octopusdeploy_environment.development_environment\", fingerprint set to \"d5:6b:a3:78:fa:fe:f5:ad:d4:79:4a:57:35:6a:32:ef\", host set to \"3.25.215.87\", name set to \"Test\" as the name of this resource, roles set to a list containing \"vm\", dot_net_core_platform set to \"linux-x64\", and machine_policy_id set to the ID of the first machine policy from \"data.octopusdeploy_machine_policies.default_machine_policy\"."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_ssh_key_account\" \"account_ec2_sydney\" {\n  name                              = \"ec2 sydney\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  private_key_file                  = \"${var.account_ec2_sydney_cert}\"\n  username                          = \"ec2-user\"\n  private_key_passphrase            = \"${var.account_ec2_sydney}\"\n}\nvariable \"account_ec2_sydney\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The password associated with the certificate for account ec2 sydney\"\n}\nvariable \"account_ec2_sydney_cert\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The certificate file for account ec2 sydney\"\n}\n\nresource \"octopusdeploy_ssh_connection_deployment_target\" \"target_3_25_215_87\" {\n  account_id            = \"${octopusdeploy_ssh_key_account.account_ec2_sydney.id}\"\n  environments          = [\"${octopusdeploy_environment.development_environment.id}\"]\n  fingerprint           = \"d5:6b:a3:78:fa:fe:f5:ad:d4:79:4a:57:35:6a:32:ef\"\n  host                  = \"3.25.215.87\"\n  name                  = \"Test\"\n  roles                 = [\"vm\"]\n  dot_net_core_platform = \"linux-x64\"\n  machine_policy_id     = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false. For \"development_environment\", include nested blocks: jira_extension_settings with environment_type set to \"unmapped\" to provide extension settings for the Jira integration, jira_service_management_extension_settings with is_enabled set to true to provide extension settings for Jira Service Management integration, and servicenow_extension_settings with is_enabled set to true to provide extension settings for ServiceNow integration.\n\nCreate a resource \"octopusdeploy_deployment_freeze\" named \"freeze\" to manage deployment freezes with attributes: name set to \"Xmas\" as the name of this resource, start set to \"2024-12-25T00:00:00+10:00\" as the start time of the freeze in RFC3339 format, and end set to \"2099-12-27T00:00:00+08:00\" as the end time of the freeze in RFC3339 format.\n\nCreate a resource \"octopusdeploy_deployment_freeze_project\" named \"project_freeze\" to manage deployment freeze scopes with attributes: deploymentfreeze_id set to the ID of the \"freeze\" deployment freeze as the deployment freeze ID associated with this freeze scope, project_id set to the ID of the \"deploy_frontend_project\" project as the project ID associated with this freeze scope, and environment_ids set to a list containing the ID of the \"development_environment\" environment as the environment IDs associated with this project deployment freeze scope.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a filter to search by a list of lifecycle IDs, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" as a filter to search by feed type, ids set to null as a filter to search by a list of IDs, partial_name set to an empty string as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables with attributes: owner_id set to the ID of the \"deploy_frontend_project\" project as the owner ID of this variable, type set to \"String\" as the type of variable represented by this resource, name set to \"Test\" as the name of this resource, and value set to \"PlainText\" as the value of this variable.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"Off\" to set the default guided failure mode, default_to_skip_if_already_installed set to false to disable skipping if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to disable treating releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the first lifecycle from \"lifecycle_default_lifecycle\" data source as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the ID of \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, and included_library_variable_sets set to an empty list. Include nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to define the versioning strategy, and connectivity_policy with allow_de"},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_deployment_freeze\" \"freeze\" {\n  name = \"Xmas\"\n  start = \"2024-12-25T00:00:00+10:00\"\n  end = \"2099-12-27T00:00:00+08:00\"\n}\n\nresource \"octopusdeploy_deployment_freeze_project\" \"project_freeze\" {\n  deploymentfreeze_id = octopusdeploy_deployment_freeze.freeze.id\n  project_id          = octopusdeploy_project.deploy_frontend_project.id\n  environment_ids = [octopusdeploy_environment.development_environment.id]\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"Off\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = { package1 = { acquisition_location = \"ExecutionTarget\", feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\", id = null, package_id = \"package1\", properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" } } }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"Off\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" to specify the name of this resource, api_version set to \"v1\" (not described in schema), feed_uri set to \"https://index.docker.io\" (not described in schema), and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"] (not described in schema)."},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_environment\" named \"development_environment\" to manage environments in Octopus Deploy with attributes: description set to \"A test environment\" to specify the description of this environment, name set to \"Development\" to specify the name of this resource, allow_dynamic_infrastructure set to true, and use_guided_failure set to false. Include a jira_extension_settings block to provide extension settings for the Jira integration with environment_type set to \"unmapped\" to specify the Jira environment type of this Octopus deployment environment. Include a jira_service_management_extension_settings block to provide extension settings for the Jira Service Management integration with is_enabled set to true to specify whether or not this extension is enabled for this project. Include a servicenow_extension_settings block to provide extension settings for the ServiceNow integration with is_enabled set to true.\n\nCreate a resource \"octopusdeploy_environment\" named \"test_environment\" to manage environments in Octopus Deploy with attributes: description set to \"A test environment\", name set to \"Test\", allow_dynamic_infrastructure set to true, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_environment\" named \"production_environment\" to manage environments in Octopus Deploy with attributes: description set to \"A test environment\", name set to \"Production\", allow_dynamic_infrastructure set to true, and use_guided_failure set to false."},{"role":"assistant","content":"resource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_channel\" named \"backend_mainline\" to manage channels in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, project_id set to the ID of the project associated with this channel, description set to \"The description of this channel.\" with value \"Test channel\", is_default set to true indicating this is the default channel for the associated project, and depends_on set to depend on the project and process steps order resources. Define a rule block as a list of rules associated with this channel with attribute tag set to \"^$\" and an action_package block containing deployment_action set to \"Test\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"The description of this project group.\" with value \"Test Description\".\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" as a filter to search by name, ids set to null as a filter to search by a list of IDs, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" as a filter to search by feed type, ids set to null as a filter to search by a list of IDs, partial_name set to an empty string as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable octopus_space_id, included_library_variable_sets set to an empty list. Define a versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\". Define a connectivity_policy block with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"process_cloudformation_step\" to manage deployment processes in Octopus Deploy with attribute project_id set to the ID of the deploy_frontend_project resource and depends_on set to an empty list.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_cloudformation_step\" to manage order of steps of a deployment process in Octopus Deploy with attributes: process_id set to the ID of the process_cloudformation_step resource, and steps set to a list containing the ID of the process_step_test resource.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_test\" to manage a single step of a deployment process in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, type set to \"Octopus.AwsRunCloudFormation\" as the execution type of the step, process_id set to the ID of the process_cloudformation_step resource, channels set to null as a set of channels associated with this step, condition set to \"Success\" indicating when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" indicating whether to run this"},{"role":"assistant","content":"resource \"octopusdeploy_channel\" \"backend_mainline\" {\n  name        = \"Test\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  description = \"Test channel\"\n  depends_on  = [octopusdeploy_project.deploy_frontend_project, octopusdeploy_process_steps_order.process_cloudformation_step]\n  is_default  = true\n  rule {\n    tag = \"^$\"\n    action_package {\n      deployment_action = \"Test\"\n    }\n  }\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"process_cloudformation_step\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"process_cloudformation_step\" {\n  process_id = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test.id}\"]\n}\nresource \"octopusdeploy_process_step\" \"process_step_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.AwsRunCloudFormation\"\n  process_id            = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"test\",\n    properties = { SelectionMode = \"immediate\" }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Aws.Region\" = \"us-east-1\"\n    \"Octopus.Action.Package.JsonConfigurationVariablesTargets\" = \"a.yml\"\n    \"Octopus.Action.Aws.AssumeRole\" = \"False\"\n    \"Octopus.Action.AwsAccount.Variable\" = \"AWS Account\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Aws.CloudFormationStackName\" = \"test\"\n    \"Octopus.Action.Aws.WaitForCompletion\" = \"True\"\n    \"Octopus.Action.AwsAccount.UseInstanceRole\" = \"False\"\n    \"Octopus.Action.Aws.CloudFormationTemplate\" = \"a.yml\"\n    \"Octopus.Action.Aws.TemplateSource\" = \"Package\"\n  }\n  properties            = {\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_channel\" named \"backend_mainline\" to manage channels in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, project_id set to the ID of the associated project, description set to \"Test channel\" as the description of this channel, and is_default set to true to indicate this is the default channel for the associated project. It depends on the project and process steps order resources.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource and description set to \"Test Description\" as the description of this project group.\n\nCreate a resource \"octopusdeploy_built_in_trigger\" named \"example\" to manage automatic release trigger based on new version of referenced package with attributes: project_id set to the ID of the project the trigger will be attached to, channel_id set to the ID of the channel in which triggered release will be created, and release_creation_package set to a combination of deployment action \"step1\" and package reference \"package1\". It depends on the process steps order resource.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false. The \"development_environment\" includes nested blocks jira_extension_settings with environment_type \"unmapped\", jira_service_management_extension_settings with is_enabled true, and servicenow_extension_settings with is_enabled true.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the owning project, type set to \"String\" as the type of variable, name set to \"Test\" as the name of this resource, and value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\", discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the lifecycle ID from the lifecycle data source, name set to \"Test\", project_group_id set to the ID of the project group, tenanted_deployment_participation set to \"Untenanted\", space_id set to the variable octopus_space_id, and included_library_variable_sets set to an empty list. It includes nested blocks versioning_strategy with template for version format, and connectivity_policy with allow_deployments_to_no_targets false, exclude_unhealthy_targets false, and skip_machine_behavior \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage deployment processes in Octopus Deploy with attribute project_id set to the ID of the associated project.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of steps of a deployment process with attributes: process_id set to the ID of the process and steps set to a list containing the ID of the process step \"process_step_get_mysql_host\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a deployment process with attributes: name set to \"step1\" as the name of this resource, type set to \"Octopus.KubernetesRunScript\" as the execution type of the step, process_id set to the ID of the process, condition set to \"Success\" to run the step on success, package_requirement set to \"LetOctopusDecide\", slug set to \"step1\" as the human-readable unique identifier, start_trigger set to \"StartAfterPrevious\" to run after previous step, and properties with \"Octopus.Action.TargetRoles\" set to \"eks\". It includes packages with a package reference named \"package"},{"role":"assistant","content":"resource \"octopusdeploy_channel\" \"backend_mainline\" {\n  name        = \"Test\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  description = \"Test channel\"\n  depends_on  = [octopusdeploy_project.deploy_frontend_project, octopusdeploy_process_steps_order.test]\n  is_default  = true\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_built_in_trigger\" \"example\" {\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  channel_id = octopusdeploy_channel.backend_mainline.id\n\n  release_creation_package = {\n    deployment_action = \"step1\"\n    package_reference      = \"package1\"\n  }\n\n  depends_on = [octopusdeploy_process_steps_order.test]\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"step1\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"False\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"step1\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by no specific lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to specify zero items to skip in the response, and take set to 1 to specify one item to take in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to filter by no specific IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to specify zero items to skip in the response, and take set to 1 to specify one item to take in the response.\n\nCreate a data source \"octopusdeploy_certificates\" named \"test\" to provide information about existing certificates with attributes: archived set to false to filter for non-archived certificates, ids set to an empty list to filter by no specific IDs, partial_name set to \"Test\" to filter certificates by partial name, skip set to 0 to specify zero items to skip in the response, and take set to 1 to specify one item to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to use environment default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test\" as the name of this project, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to include no library variable sets; with nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to define the versioning strategy template; connectivity_policy with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to skip unavailable machines.\n\nCreate a resource \"octopusdeploy_variable\" named \"cert_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project_1 resource to associate the variable with the project, type set to \"Certificate\" to specify the variable type, name set to \"test\" as the name of the variable, and value set to the ID of the first certificate from the test certificates data source.\n\nCreate an output \"octopus_project_1\" to output the ID of the project_1 resource.\n\nCreate a resource \"octopusdeploy_project\" named \"project_2\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to use environment default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project 2\" as the description of this project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test 2\" as the name of this project, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to include no library variable sets; with nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to define the versioning strategy template; connectivity_policy with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_certificates\" \"test\" {\n  archived     = false\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"cert_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"Certificate\"\n  name     = \"test\"\n  value    = data.octopusdeploy_certificates.test.certificates[0].id\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_version_controlled set to false, lifecycle_id set to the ID of the first lifecycle from the data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the ID of \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs; with nested blocks: versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_project_deployment_target_trigger\" named \"projecttrigger_test\" to manage deployment target triggers with attributes: name set to \"test\" as the name of this resource, project_id set to the ID of \"deploy_frontend_project\" as the ID of the project to attach the trigger, event_categories set to an empty list to apply event category filters, environment_ids set to an empty list to apply environment id filters, event_groups set to [\"MachineAvailableForDeployment\"] to apply event group filters, roles set to an empty list to apply event role filters, and should_redeploy set to false to disable redeployment to targets already up-to-date."},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_project_deployment_target_trigger\" \"projecttrigger_test\" {\n  name             = \"test\"\n  project_id       = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  event_categories = []\n  environment_ids  = []\n  event_groups     = [\"MachineAvailableForDeployment\"]\n  roles            = []\n  should_redeploy  = false\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5, connection_retry_sleep_interval set to 100000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit. Include a machine_cleanup_policy block with delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds. Include a machine_connectivity_policy block with machine_connectivity_behavior set to \"ExpectedToBeOnline\". Include a machine_health_check_policy block with health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, health_check_type set to \"RunScript\", a bash_health_check_policy block with run_type set to \"Inline\" and empty script_body, and a powershell_health_check_policy block with run_type set to \"Inline\" and script_body containing a PowerShell script checking free disk space. Include a machine_update_policy block with calamari_update_behavior set to \"UpdateOnDeployment\", tentacle_update_behavior set to \"NeverUpdate\", and kubernetes_agent_update_behavior set to \"Update\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy, each with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of each environment, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_cloud_region_deployment_target\" named \"target_region1\" to manage cloud region deployment targets in Octopus Deploy with attributes: environments set to a list containing the ID of the \"development_environment\" environment as a list of environment IDs associated with this resource, name set to \"Test\" as the name of this resource, roles set to [\"cloud\"], default_worker_pool_id set to an empty string, health_status set to \"Healthy\" representing the health status of this deployment target, is_disabled set to false, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source, shell_name set to \"Unknown\", shell_version set to \"Unknown\", tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this resource."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 100000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_cloud_region_deployment_target\" \"target_region1\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Test\"\n  roles                             = [\"cloud\"]\n  default_worker_pool_id            = \"\"\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n  thumbprint                        = \"\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"type/a\", \"type/b\", \"type/ignorethis\"] as a list of tenant tags associated with this resource, and depends_on set to depend on octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b, and octopusdeploy_tag.tag_ignore.\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"team_a_frontend\" to manage tenant projects in Octopus Deploy with attributes: environment_ids set to the IDs of octopusdeploy_environment.test_environment, octopusdeploy_environment.development_environment, and octopusdeploy_environment.production_environment as the environment IDs associated with this tenant, project_id set to octopusdeploy_project.deploy_frontend_project.id as the project ID associated with this tenant, and tenant_id set to octopusdeploy_tenant.tenant_team_a.id as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_tenant\" named \"tenant_excluded\" to manage tenants in Octopus Deploy with attributes: name set to \"Excluded\" as the name of this resource, description set to \"Excluded tenant\" as the description of this tenant, tenant_tags set to [\"type/excluded\"] as a list of tenant tags associated with this resource, and depends_on set to depend on octopusdeploy_tag.tag_excluded.\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"excluded_frontend\" to manage tenant projects in Octopus Deploy with attributes: environment_ids set to the IDs of octopusdeploy_environment.test_environment, octopusdeploy_environment.development_environment, and octopusdeploy_environment.production_environment as the environment IDs associated with this tenant, project_id set to octopusdeploy_project.deploy_frontend_project.id as the project ID associated with this tenant, and tenant_id set to octopusdeploy_tenant.tenant_excluded.id as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a resource \"octopusdeploy_environment\" named \"development_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Development\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_environment\" named \"test_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Test\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_environment\" named \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set to \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false as the disabled status of this project, is_discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from data.octopusdeploy_lifecycles.lifecycle_default_lifecycle, name set to \"Test\" as the name of this resource, project_group_id set to octopusdeploy_project_group.project_group_test.id as the project group ID associated with this project, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, space_id"},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"type/a\", \"type/b\", \"type/ignorethis\"]\n  depends_on  = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b, octopusdeploy_tag.tag_ignore]\n}\n\nresource \"octopusdeploy_tenant_project\" \"team_a_frontend\"{\n  environment_ids = [\n    octopusdeploy_environment.test_environment.id,\n    octopusdeploy_environment.development_environment.id,\n    octopusdeploy_environment.production_environment.id\n  ]\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id = octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_excluded\" {\n  name        = \"Excluded\"\n  description = \"Excluded tenant\"\n  tenant_tags = [\"type/excluded\"]\n  depends_on  = [octopusdeploy_tag.tag_excluded]\n\n}\n\nresource \"octopusdeploy_tenant_project\" \"excluded_frontend\" {\n  environment_ids = [\n    octopusdeploy_environment.test_environment.id,\n    octopusdeploy_environment.development_environment.id,\n    octopusdeploy_environment.production_environment.id\n  ]\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id = octopusdeploy_tenant.tenant_excluded.id\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"type\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_excluded\" {\n  name        = \"excluded\"\n  color       = \"#333333\"\n  description = \"excluded\"\n  sort_order  = 4\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_ignore\" {\n  name        = \"ignorethis\"\n  color       = \"#333333\"\n  description = \"ignore this\"\n  sort_order  = 5\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, ids set to null to not filter by IDs, partial_name set to an empty string to not filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_environments\" named \"test\" to provide information about existing environments with attributes: ids set to an empty list to not filter by IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_environments\" named \"dev\" to provide information about existing environments with attributes: ids set to an empty list to not filter by IDs, partial_name set to \"Development\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_environments\" named \"prod\" to provide information about existing environments with attributes: ids set to an empty list to not filter by IDs, partial_name set to \"Production\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not default to skip if already installed, description set to \"Test project\" to describe the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the default lifecycle from the data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\", name set to \"Test\" to name the project, project_group_id set to the ID of the project group from the data source \"octopusdeploy_project_groups\" named \"project_group\", tenanted_deployment_participation set to \"TenantedOrUntenanted\" to specify the tenanted deployment mode, space_id set to the variable \"octopus_space_id\" to associate the project with a space, included_library_variable_sets set to a list containing the ID of the library variable set from the data source \"octopusdeploy_library_variable_sets\" named \"variable\", and nested blocks: versioning_strategy with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to define the versioning strategy template; connectivity_policy with attributes allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to not filter by IDs, partial_name set to \"Default Lifecycle\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to not filter by IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_library_variable_sets\" named \"variable\" to provide information about existing library variable sets with attributes: partial_name set to \"Octopus Variables\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response."},{"role":"assistant","content":"data \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\ndata \"octopusdeploy_environments\" \"test\" {\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"dev\" {\n  ids          = []\n  partial_name = \"Development\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_environments\" \"prod\" {\n  ids          = []\n  partial_name = \"Production\"\n  skip         = 0\n  take         = 1\n}\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"TenantedOrUntenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = [data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].id]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"variable\" {\n  partial_name = \"Octopus Variables\"\n  skip         = 0\n  take         = 1\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tag_set\" named \"tagset_tag1\" to manage tag sets in Octopus Deploy with attributes: name set to \"tag1\" as the name of this resource, description set to \"Test tagset\" as the description of this tag set, and sort_order set to 0 as the sort order associated with this resource.\n\nCreate a resource \"octopusdeploy_tag\" named \"tag_a\" to manage tags in Octopus Deploy with attributes: name set to \"a\" as the name of the tag, color set to \"#333333\" as the color of the tag, description set to \"tag a\" as the description of the tag, sort_order set to 2 as the sort order of the tag, and tag_set_id set to the ID of the associated tag set \"tagset_tag1\".\n\nCreate a resource \"octopusdeploy_tag\" named \"tag_b\" to manage tags in Octopus Deploy with attributes: name set to \"b\" as the name of the tag, color set to \"#333333\" as the color of the tag, description set to \"tag b\" as the description of the tag, sort_order set to 3 as the sort order of the tag, and tag_set_id set to the ID of the associated tag set \"tagset_tag1\"."},{"role":"assistant","content":"resource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_worker_pools\" named \"workerpool_default\" to provide information about existing worker pools with attributes: name set to \"Default Worker Pool\" as a filter to search by name, ids set to null as a filter to search by a list of IDs, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" as a filter to search by feed type, ids set to null as a filter to search by a list of IDs, partial_name set to an empty string as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage a project in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the id of the first lifecycle from data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the id of \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs. Define a nested block \"versioning_strategy\" with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" as the versioning strategy template. Define a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a resource \"octopusdeploy_process\" named \"process_tfapply\" to manage a deployment process in Octopus Deploy with attribute project_id set to the id of \"deploy_frontend_project\" as the id of the project this process belongs to.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_step_order_tfapply\" to manage order of steps of a deployment process in Octopus Deploy with attributes: process_id set to the id of \"process_tfapply\" as the id of the process steps belongs to, and steps set to a list containing the id of \"process_step_tfapply_test\" as the steps in the order of execution.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_tfapply_test\" to manage a single step of a deployment process in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, type set to \"Octopus.TerraformApply\" as the execution type of the step, process_id set to the id of \"process_tfapply\" as the id of the process this step belongs to, channels set to null as a set of channels associated with this step, condition set to \"Success\" to run the step on success, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will"},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"process_tfapply\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_tfapply\" {\n  process_id = \"${octopusdeploy_process.process_tfapply.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_tfapply_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_tfapply_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_tfapply.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Terraform.TemplateParameters\" = jsonencode({        })\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.Terraform.Template\" = \"#test\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_username_password_account\" named \"account_gke\" to manage username-password accounts in Octopus Deploy with attributes: description set to \"A test account\" to specify the description of this username/password account, name set to \"GKE\" to specify the name of the username-password account, environments set to null to indicate no associated environment IDs, tenant_tags set to an empty list to specify no tenant tags associated with this resource, tenants set to null to indicate no associated tenant IDs, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode of the resource, username set to \"admin\" to specify the username associated with this resource, and password set to \"secretgoeshere\" to specify the password associated with this resource."},{"role":"assistant","content":"resource \"octopusdeploy_username_password_account\" \"account_gke\" {\n  description                       = \"A test account\"\n  name                              = \"GKE\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  username                          = \"admin\"\n  password                          = \"secretgoeshere\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_aws_elastic_container_registry\" named \"feed_ecr\" to manage an AWS Elastic Container Registry in Octopus Deploy with attributes: name set to \"ECR\" to specify the name of this resource, access_key set to the variable \"feed_ecr_access_key\" which is the AWS access key to use when authenticating against Amazon Web Services, secret_key set to the variable \"feed_ecr_secret_key\" which is the AWS secret key to use when authenticating against Amazon Web Services, package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"], and region set to \"us-east-1\" to specify the AWS region where the registry resides.\n\nDefine a variable \"feed_ecr_access_key\" of type string, not nullable, sensitive, with the description \"The access key used for the ECR feed.\"\n\nDefine a variable \"feed_ecr_secret_key\" of type string, not nullable, sensitive, with the description \"The secret key used for the ECR feed.\""},{"role":"assistant","content":"resource \"octopusdeploy_aws_elastic_container_registry\" \"feed_ecr\" {\n  name                                 = \"ECR\"\n  access_key                           = var.feed_ecr_access_key\n  secret_key                           = var.feed_ecr_secret_key\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n  region                               = \"us-east-1\"\n}\nvariable \"feed_ecr_access_key\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The access key used for the ECR feed\"\n}\nvariable \"feed_ecr_secret_key\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret key used for the ECR feed\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_git_credential\" named \"gitcredential_test\" to manage a Git credential in Octopus Deploy with attributes: description set to \"test git credential\" to specify the description of this Git Credential, name set to \"test\" to specify the name of this Git Credential, type set to \"UsernamePassword\" to specify the Git credential authentication type, username set to \"admin\" to specify the username for the Git credential, and password set to the sensitive variable \"gitcredential_test\" to specify the password for the Git credential. Create a variable \"gitcredential_test\" of type string, non-nullable, sensitive, with description \"The secret variable value associated with the git credential test\" and default value \"Password01!\"."},{"role":"assistant","content":"resource \"octopusdeploy_git_credential\" \"gitcredential_test\" {\n  description = \"test git credential\"\n  name        = \"test\"\n  type        = \"UsernamePassword\"\n  username    = \"admin\"\n  password    = \"${var.gitcredential_test}\"\n}\nvariable \"gitcredential_test\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The secret variable value associated with the git credential test\"\n  default     = \"Password01!\"\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_aws_account\" named \"account_aws_account\" to manage AWS accounts in Octopus Deploy with attributes: name set to \"AWS Account\" as the name of this AWS account, description set to an empty string as a user-friendly description of this AWS account, environments set to null as the list of environment IDs associated with this resource, tenant_tags set to an empty list as the list of tenant tags associated with this resource, tenants set to null as the list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode of the resource, access_key set to \"ABCDEFGHIJKLMNOPQRST\" as the access key associated with this AWS account, and secret_key set to \"secretgoeshere\" as the secret key associated with this resource."},{"role":"assistant","content":"resource \"octopusdeploy_aws_account\" \"account_aws_account\" {\n  name                              = \"AWS Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  access_key                        = \"ABCDEFGHIJKLMNOPQRST\"\n  secret_key                        = \"secretgoeshere\"\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" to specify the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"]."},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_channel\" named \"backend_mainline\" to manage channels in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, project_id set to the ID of the project resource \"deploy_frontend_project\" as the project ID associated with this channel, description set to \"Test channel\" as the description of this channel, and is_default set to true indicating this is the default channel for the associated project. This resource depends on the project \"deploy_frontend_project\" and process steps order \"test\".\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource and description set to \"Test Description\" as the description of this project group.\n\nCreate a resource \"octopusdeploy_external_feed_create_release_trigger\" named \"my_trigger\" to manage External feed triggers (release creation type) in Octopus Deploy with attributes: name set to \"My feed trigger\" as the name of this resource, space_id set to the variable \"octopus_space_id\" as the space ID associated with the project to attach the trigger, project_id set to the ID of the project \"deploy_frontend_project\" as the ID of the project to attach the trigger, and channel_id set to the ID of the channel \"backend_mainline\" as the ID of the channel in which the release will be created. It includes a package block with deployment_action_slug set to \"step1\" and package_reference set to \"package1\". This resource depends on the process steps order \"test\".\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false. The \"development_environment\" includes jira_extension_settings with environment_type set to \"unmapped\", jira_service_management_extension_settings with is_enabled set to true, and servicenow_extension_settings with is_enabled set to true.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by no specific IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, ids set to null to filter by no specific IDs, partial_name set to an empty string, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project \"deploy_frontend_project\" as the owner ID of this variable, type set to \"String\" as the type of variable represented by this resource, name set to \"Test\" as the name of this resource, and value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode,"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_channel\" \"backend_mainline\" {\n  name        = \"Test\"\n  project_id  = octopusdeploy_project.deploy_frontend_project.id\n  description = \"Test channel\"\n  depends_on  = [octopusdeploy_project.deploy_frontend_project, octopusdeploy_process_steps_order.test]\n  is_default  = true\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_external_feed_create_release_trigger\" \"my_trigger\" {\n  name       = \"My feed trigger\"\n  space_id   = var.octopus_space_id\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  channel_id = octopusdeploy_channel.backend_mainline.id\n  package {\n    deployment_action_slug = \"step1\"\n    package_reference      = \"package1\"\n  }\n  depends_on = [octopusdeploy_process_steps_order.test]\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n\n  jira_extension_settings {\n    environment_type = \"unmapped\"\n  }\n\n  jira_service_management_extension_settings {\n    is_enabled = true\n  }\n\n  servicenow_extension_settings {\n    is_enabled = true\n  }\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"step1\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"False\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\" }\n    }\n  }\n  slug                  = \"step1\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = [octopusdeploy_environment.development_environment.id]\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"terraform\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_static_worker_pool\" named \"static_pool\" to manage static worker pools in Octopus Deploy with attributes: description set to \"A worker pool\" describing this static worker pool, is_default set to true, name set to \"Static pool\" as the name of this resource, and sort_order set to 5 defining the order number to sort a dynamic worker pool.\n\nCreate a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" describing this project group.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" to filter the feed type, ids set to null, partial_name set to an empty string, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0, and take set to 1.\n\nCreate a resource \"octopusdeploy_variable\" named \"workerpool_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project resource \"deploy_frontend_project\", type set to \"String\" as the type of variable, name set to \"WorkerPool\" as the name of this resource, and value set to the ID of the static worker pool resource \"static_pool\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" defining the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" describing this project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group resource \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\" defining the tenanted deployment mode, space_id set to the variable \"octopus_space_id\", included_library_variable_sets set to an empty list, versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage deployment processes in Octopus Deploy with attribute project_id set to the ID of the project resource \"deploy_frontend_project\".\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of steps of a deployment process with attributes: process_id set to the ID of the process resource \"test\", and steps set to a list containing the ID of the process step resource \"process_step_get_mysql_host\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a deployment process with attributes: name set to \"Get MySQL Host\" as the name of this resource, type set to \"Octopus.KubernetesRunScript\" defining the execution type of the step, process_id set to the ID of the process resource \"test\", channels set to null, condition set to \"Success\" defining when to run the step, environments set to null, excluded_environments set to null, package_requirement set to \"LetOctopusDecide\" defining when to run this step relative to package acquisition, packages set to a map with key \"package1\" containing acquisition_location set to \"ExecutionTarget\", feed_id set to the ID of the docker container registry resource \"feed_docker\", id set to null, package_id set to \"package1"},{"role":"assistant","content":"resource \"octopusdeploy_static_worker_pool\" \"static_pool\" {\n  description = \"A worker pool\"\n  is_default  = true\n  name        = \"Static pool\"\n  sort_order  = 5\n}\nresource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"workerpool_variable\" {\n  owner_id = octopusdeploy_project.deploy_frontend_project.id\n  type     = \"String\"\n  name     = \"WorkerPool\"\n  value    = octopusdeploy_static_worker_pool.static_pool.id\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"ExecutionTarget\",\n      feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\",\n      id = null,\n      package_id = \"package1\",\n      properties = {\n        Extract = \"False\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  worker_pool_variable  = \"#{WorkerPool}\"\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.deploy_frontend_project.id\n  name               = \"Runbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = []\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_runbook\" {\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  runbook_id = \"${octopusdeploy_runbook.runbook.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_runbook\" {\n  process_id = \"${octopusdeploy_process.process_test_runbook.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test_runbook_hello_world__using_powershell_.id}\"]\n}\n\nvariable \"project_runbook_step_hello_world__using_powershell__package_package1_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named package1 from step Hello world (using PowerShell) in project Runbook\"\n  default     = \"package1\"\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_runbook_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_runbook.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = []\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  worker_pool_variable  = \"#{WorkerPool}\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n      id = null,\n      package_id = \"${var.project_runbook_step_hello_world__using_powershell__package_package1_packageid}\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.EnabledFeatures\" = \"Octopus.Features.JsonConfigurationVariables\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to [\"tag1/a\", \"tag1/b\"] as a list of tenant tags associated with this resource, and depends_on set to [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b].\n\nCreate a resource \"octopusdeploy_tenant_project\" named \"tenant_project\" to manage tenant projects in Octopus Deploy with attributes: environment_ids set to the IDs of test, development, and production environments as the environment IDs associated with this tenant, project_id set to the ID of the deploy_frontend_project as the project ID associated with this tenant, and tenant_id set to the ID of tenant_team_a as the tenant ID associated with this tenant.\n\nCreate a resource \"octopusdeploy_certificate\" named \"certificate_kind_ca\" to manage certificates in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, certificate_data set to the contents of \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as a list of environment IDs associated with this resource, notes set to \"A test certificate\" as notes (not in schema but used), tenant_tags set to an empty list as a list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and tenants set to an empty list as a list of tenant IDs associated with this certificate.\n\nCreate a resource \"octopusdeploy_certificate\" named \"tenanted\" to manage certificates in Octopus Deploy with attributes: name set to \"Tenanted\" as the name of this resource, certificate_data set to the contents of \"dummycert.txt\" as the encoded data of the certificate, password set to \"Password01!\" as the password associated with this resource, environments set to an empty list as a list of environment IDs associated with this resource, notes set to \"A test certificate\" as notes, tenant_tags set to an empty list as a list of tenant tags associated with this certificate, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, and tenants set to a list containing the ID of tenant_team_a as a list of tenant IDs associated with this certificate.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource and description set to \"Test Description\" as the description of this project group.\n\nCreate three resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", and \"production_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true to allow dynamic infrastructure, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", and \"Production\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable auto creation of releases, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false to not default to skip if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the default lifecycle from the data source, name set to \"Test\" as the name of this resource, project_group_id set to the ID of project_group_test as the project group ID associated with this project, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, space_id set to var.octopus_space_id as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs"},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n\n\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenant_project\" {\n  environment_ids = [octopusdeploy_environment.test_environment.id, octopusdeploy_environment.development_environment.id, octopusdeploy_environment.production_environment.id]\n  project_id   = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id    = octopusdeploy_tenant.tenant_team_a.id\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Untenanted\"\n  tenants                           = []\n}\n\nresource \"octopusdeploy_certificate\" \"tenanted\" {\n  name                              = \"Tenanted\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = []\n  tenanted_deployment_participation = \"Tenanted\"\n  tenants                           = [octopusdeploy_tenant.tenant_team_a.id]\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_maven_feed\" named \"feed_maven\" to manage a Maven feed in Octopus Deploy with attributes: name set to \"Maven\" to specify the name of this resource, feed_uri set to \"https://repo.maven.apache.org/maven2/\" to specify the URI of the feed, username set to \"username\" to specify the username associated with this resource, password set to \"password\" to specify the password associated with this resource, package_acquisition_location_options set to [\"Server\", \"ExecutionTarget\"] to specify the package acquisition location options, download_attempts set to 5 to specify the number of times a deployment should attempt to download a package from this feed before failing, and download_retry_backoff_seconds set to 10 to specify the number of seconds to apply as a linear back off between download attempts."},{"role":"assistant","content":"resource \"octopusdeploy_maven_feed\" \"feed_maven\" {\n  name                                 = \"Maven\"\n  feed_uri                             = \"https://repo.maven.apache.org/maven2/\"\n  username                             = \"username\"\n  password                             = \"password\"\n  package_acquisition_location_options = [\"Server\", \"ExecutionTarget\"]\n  download_attempts                    = 5\n  download_retry_backoff_seconds       = 10\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, description set to \"Test tenant\" as the description of this tenant, tenant_tags set to an empty list as a list of tenant tags associated with this resource, and depends_on set to an empty list.\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false as the disabled status of this project, is_discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_version_controlled set to false, lifecycle_id set to the id of the first lifecycle from the data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the id of \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, included_library_variable_sets set to an empty list as the list of included library variable set IDs. \n\nInclude a nested block \"versioning_strategy\" with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nInclude a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_variable\" named \"scoped_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the id of \"project_1\" as the owner ID of this variable, type set to \"String\" as the type of variable represented by this resource, name set to \"test\" as the name of this resource, and value set to the id of \"account_autopilot_service_account\".\n\nCreate a resource \"octopusdeploy_token_account\" named \"account_autopilot_service_account\" to manage token accounts in Octopus Deploy with attributes: description set to \"A test account\" as the description of this token account, name set to \"Token\" as the name of this resource, environments set to null as a list of environment IDs associated with this resource, tenant_tags set to an empty list as a list of tenant tags associated with this resource, tenants set to a list containing the id of \"tenant_team_a\" as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, and token set to \"secretgoeshere\" as the token of this resource."},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = []\n  depends_on = []\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"test\"\n  value    = octopusdeploy_token_account.account_autopilot_service_account.id\n}\n\nresource \"octopusdeploy_token_account\" \"account_autopilot_service_account\" {\n  description                       = \"A test account\"\n  name                              = \"Token\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = [octopusdeploy_tenant.tenant_team_a.id]\n  tenanted_deployment_participation = \"Untenanted\"\n  token                             = \"secretgoeshere\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a filter to search by a list of lifecycle IDs, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_feeds\" named \"built_in_feed\" to provide information about existing feeds with attributes: feed_type set to \"BuiltIn\" as a filter to search by feed type, ids set to null as a filter to search by a list of IDs, partial_name set to an empty string as a filter to search by a partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage a static worker pool with attributes: name set to \"Docker\" as the name of this resource, description set to \"A test worker pool\" as the description of this static worker pool, is_default set to true to indicate this is the default worker pool, and sort_order set to 3 as the order number to sort a dynamic worker pool.\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage a project with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false, is_version_controlled set to false to indicate the project is not version controlled, lifecycle_id set to the id of the lifecycle from the data source \"lifecycle_default_lifecycle\" to associate the lifecycle, name set to \"Test\" as the name of this resource, project_group_id set to the id of the project group \"project_group_test\" to associate the project group, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, included_library_variable_sets set to an empty list as the list of included library variable set IDs, versioning_strategy configured with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" as the versioning strategy template, and connectivity_policy configured with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a resource \"octopusdeploy_process\" named \"process_cloudformation_step\" to manage a deployment process with attribute project_id set to the id of the project \"deploy_frontend_project\" to specify the project this process belongs to, and depends_on set to an empty list.\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"process_cloudformation_step\" to manage the order of steps of a deployment process with attributes: process_id set to the id of the process \"process_cloudformation_step\" to specify the process steps belong to, and steps set to a list containing the id of the process step \"process_step_test\" to specify steps in the order of execution.\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_test\" to manage a single step of a deployment process with attributes: name set to \"Test\" as the name of this resource, type set to \"Octopus.AwsRunCloudFormation\" as the execution type of the step, process_id set to the id of the process \"process_cloudformation_step\" to specify the process this step belongs to, channels set to null as a set of channels associated with this step, condition set to \"Success\" to specify when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" to specify whether to run this step before or after package acquisition, primary"},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = true\n  sort_order  = 3\n}\n\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"process_cloudformation_step\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"process_cloudformation_step\" {\n  process_id = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_test.id}\"]\n}\nresource \"octopusdeploy_process_step\" \"process_step_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.AwsRunCloudFormation\"\n  process_id            = \"${octopusdeploy_process.process_cloudformation_step.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = { acquisition_location = \"Server\", feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\", id = null, package_id = \"test\", properties = { SelectionMode = \"immediate\" } }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Aws.Region\" = \"us-east-1\"\n    \"Octopus.Action.Package.JsonConfigurationVariablesTargets\" = \"a.yml\"\n    \"Octopus.Action.Aws.AssumeRole\" = \"False\"\n    \"Octopus.Action.AwsAccount.Variable\" = \"AWS Account\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Aws.CloudFormationStackName\" = \"test\"\n    \"Octopus.Action.Aws.WaitForCompletion\" = \"True\"\n    \"Octopus.Action.AwsAccount.UseInstanceRole\" = \"False\"\n    \"Octopus.Action.Aws.CloudFormationTemplate\" = \"a.yml\"\n    \"Octopus.Action.Aws.TemplateSource\" = \"Package\"\n  }\n  properties            = {\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by no specific lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to filter by no specific IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to skip zero items in the response, and take set to 1 to take one item in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project\" describing the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from the data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the project name, project_group_id set to the ID of the project group from the data source \"project_group\", tenanted_deployment_participation set to \"Untenanted\" defining the tenanted deployment mode, included_library_variable_sets set to an empty list, and nested blocks:\n\n- versioning_strategy with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" defining the versioning template.\n\n- connectivity_policy with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\" defining deployment connectivity behavior.\n\nCreate a resource \"octopusdeploy_variable\" named \"scoped_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project \"project_1\", type set to \"String\" defining the variable type, name set to \"test\" as the variable name, value set to \"test\" as the variable value, and a nested scope block with attribute tenant_tags set to [\"tag1/a\"] defining tenant tags scoped to this variable value.\n\nCreate an output named \"octopus_project_1\" with value set to the ID of the project \"project_1\".\n\nCreate a resource \"octopusdeploy_project\" named \"project_2\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\", default_to_skip_if_already_installed set to false, description set to \"Test project 2\" describing the project, discrete_channel_release set to false, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the lifecycle from the data source \"lifecycle_default_lifecycle\", name set to \"Test 2\" as the project name, project_group_id set to the ID of the project group from the data source \"project_group\", tenanted_deployment_participation set to \"Untenanted\", included_library_variable_sets set to an empty list, and nested blocks:\n\n- versioning_strategy with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\n- connectivity_policy with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\"."},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"test\"\n  value    = \"test\"\n  scope {\n    tenant_tags = [\"tag1/a\"]\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_machine_policies\" named \"default_machine_policy\" to provide information about existing machine policies with attributes: ids set to null as a filter to search by a list of IDs, partial_name set to \"Default Machine Policy\" as a filter to search by the partial match of a name, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take (or return) in the response.\n\nCreate a resource \"octopusdeploy_static_worker_pool\" named \"workerpool_docker\" to manage static worker pools in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, description set to \"A test worker pool\" as the description of this static worker pool, is_default set to false, and sort_order set to 3 as the order number to sort a dynamic worker pool.\n\nCreate a resource \"octopusdeploy_listening_tentacle_worker\" named \"optionals\" to manage a listening tentacle worker in Octopus Deploy with attributes: name set to \"Listening Worker\" as the name of this resource, machine_policy_id set to the ID of the first machine policy from the \"default_machine_policy\" data source to select the machine policy, worker_pool_ids set to a list containing the ID of the \"workerpool_docker\" static worker pool to select at least one worker pool for the worker, thumbprint set to \"96203ED84246201C26A2F4360D7CBC36AC1D232D\" as the X509 certificate thumbprint that securely identifies the Tentacle, uri set to \"https://tentacle.listening/\" as the network address at which the Tentacle can be reached, and is_disabled set to true to indicate when disabled, worker will not be included in any deployments."},{"role":"assistant","content":"data \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_listening_tentacle_worker\" \"optionals\" {\n  name              = \"Listening Worker\"\n  machine_policy_id = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  worker_pool_ids = [octopusdeploy_static_worker_pool.workerpool_docker.id]\n  thumbprint        = \"96203ED84246201C26A2F4360D7CBC36AC1D232D\"\n  uri               = \"https://tentacle.listening/\"\n  is_disabled       = true\n\n}\nresource \"octopusdeploy_static_worker_pool\" \"workerpool_docker\" {\n  name        = \"Docker\"\n  description = \"A test worker pool\"\n  is_default  = false\n  sort_order  = 3\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create data sources to provide information about existing feeds filtered by feed_type \"Helm\", \"Docker\", \"OctopusProject\", and \"BuiltIn\" with partial_name filters and pagination controls skip=0 and take=1.  \nCreate data sources to provide information about existing projects filtered by partial_name \"Lookup project\" with skip=0 and take=1.  \nCreate data sources to provide information about existing environments filtered by partial_name \"Test\" with skip=0 and take=1.  \nCreate data sources to provide information about existing certificates filtered by archived=false and partial_name \"Test\" with skip=0 and take=1.  \nCreate data sources to provide information about existing accounts filtered by account_type \"AzureServicePrincipal\" and \"AmazonWebServicesAccount\" with partial_name filters and pagination controls skip=0 and take=1.  \nCreate data sources to provide information about existing lifecycles filtered by partial_name \"Default Lifecycle\" and \"Simple\" with skip=0 and take=1.  \nCreate data sources to provide information about existing project groups filtered by partial_name \"Test\" with skip=0 and take=1.  \nCreate data sources to provide information about existing git credentials filtered by name \"matt\" with skip=0 and take=1.  \nCreate data sources to provide information about existing library variable sets filtered by partial_name \"Test\", \"Test2\", and \"Test3\" with skip=0 and take=1.  \nCreate data sources to provide information about existing worker pools filtered by name \"Default Worker Pool\" and partial_name \"Docker\" with skip=0 and take=1.  \nCreate resource \"octopusdeploy_tag_set\" named \"tagset_tag1\" to manage tag sets with attributes: name set to \"tag1\", description set to \"Test tagset\", and sort_order set to 0.  \nCreate resource \"octopusdeploy_tag\" named \"tag_a\" to manage tags with attributes: name set to \"a\", color set to \"#333333\", description set to \"tag a\", sort_order set to 2, and tag_set_id referencing tagset_tag1.id.  \nCreate resource \"octopusdeploy_tag\" named \"tag_b\" to manage tags with attributes: name set to \"b\", color set to \"#333333\", description set to \"tag b\", sort_order set to 3, and tag_set_id referencing tagset_tag1.id.  \nCreate resource \"octopusdeploy_tag_set\" named \"tagset_tag2\" to manage tag sets with attributes: name set to \"tag2\", description set to \"Test tagset\", and sort_order set to 0.  \nCreate resource \"octopusdeploy_tag\" named \"tag_c\" to manage tags with attributes: name set to \"c\", color set to \"#333333\", description set to \"tag c\", sort_order set to 2, and tag_set_id referencing tagset_tag2.id.  \nCreate resource \"octopusdeploy_tag\" named \"tag_d\" to manage tags with attributes: name set to \"d\", color set to \"#333333\", description set to \"tag d\", sort_order set to 3, and tag_set_id referencing tagset_tag2.id.  \nCreate resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants with attributes: name set to \"Team A\", description set to \"Test tenant\", tenant_tags set to [\"tag1/a\", \"tag1/b\"], and depends_on referencing tag_a and tag_b.  \nCreate resource \"octopusdeploy_tenant_project\" named \"tenanta_project\" to manage tenant projects with attributes: environment_ids set to the first environment id from environments data source filtered by \"Test\", project_id referencing project_1.id, and tenant_id referencing tenant_team_a.id.  \nCreate resource \"octopusdeploy_tenant\" named \"tenant_team_b\" to manage tenants with attributes: name set to \"Team B\", description set to \"Test tenant\", tenant_tags set to [\"tag1/a\", \"tag1/b\"], and depends_on referencing tag_a and tag_b.  \nCreate resource \"octopusdeploy_tenant_project\" named \"tenantb_project\" to manage tenant projects with attributes: environment_ids set to the first environment id from environments data source filtered by \"Test\", project_id referencing project_2.id, and tenant_id referencing tenant_team_b.id.  \nCreate resource \"octopusdeploy_tenant\" named \"tenant_team_c\" to manage tenants with attributes: name set to \"Team C\", description set to \"Test tenant\", tenant_tags set to [\"tag1/a\", \"tag1/b\"], and depends_on referencing tag_a and tag_b.  \nCreate resource \"octopusdeploy_tenant_project\" named \"tenantc_project\" to manage tenant projects with attributes: environment_ids set to the first environment id from environments data source filtered by \"Test\", project_id referencing project_2.id, and tenant_id referencing tenant_team_c.id.  \nCreate resource \"octopusdeploy_project\" named \"project_1\" to manage projects"},{"role":"assistant","content":"data \"octopusdeploy_feeds\" \"helm_feed\" {\n  feed_type    = \"Helm\"\n  ids          = null\n  partial_name = \"Helm\"\n  skip         = 0\n  take         = 1\n}\ndata \"octopusdeploy_projects\" \"other\" {\n  partial_name           = \"Lookup project\"\n  skip                   = 0\n  take                   = 1\n}\ndata \"octopusdeploy_feeds\" \"docker_feed\" {\n  feed_type    = \"Docker\"\n  ids          = null\n  partial_name = \"Docker\"\n  skip         = 0\n  take         = 1\n}\nresource \"octopusdeploy_project_deployment_target_trigger\" \"projecttrigger_test1\" {\n  name             = \"Test 1\"\n  project_id       = \"${octopusdeploy_project.project_1.id}\"\n  event_categories = []\n  environment_ids  = []\n  event_groups     = [\"MachineAvailableForDeployment\"]\n  roles            = []\n  should_redeploy  = false\n}\n\nresource \"octopusdeploy_project_deployment_target_trigger\" \"projecttrigger_test2\" {\n  name             = \"Test 2\"\n  project_id       = \"${octopusdeploy_project.project_2.id}\"\n  event_categories = []\n  environment_ids  = []\n  event_groups     = [\"MachineAvailableForDeployment\"]\n  roles            = []\n  should_redeploy  = false\n}\ndata \"octopusdeploy_environments\" \"test\" {\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n\n\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project\" {\n  environment_ids = [data.octopusdeploy_environments.test.environments[0].id]\n  project_id   = octopusdeploy_project.project_1.id\n  tenant_id = octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_team_b\" {\n  name        = \"Team B\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenantb_project\" {\n  environment_ids = [data.octopusdeploy_environments.test.environments[0].id]\n  project_id   = octopusdeploy_project.project_2.id\n  tenant_id    = octopusdeploy_tenant.tenant_team_b.id\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_team_c\" {\n  name        = \"Team C\"\n  description = \"Test tenant\"\n  tenant_tags = [\"tag1/a\", \"tag1/b\"]\n  depends_on = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenantc_project\" {\n  environment_ids = [data.octopusdeploy_environments.test.environments[0].id]\n  project_id   = octopusdeploy_project.project_2.id\n  tenant_id = octopusdeploy_tenant.tenant_team_c.id\n}\ndata \"octopusdeploy_certificates\" \"example\" {\n  archived     = false\n  ids          = []\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\ndata \"octopusdeploy_accounts\" \"azure\" {\n  account_type = \"AzureServicePrincipal\"\n  ids          = []\n  partial_name = \"Azure\"\n  skip         = 0\n  take         = 1\n}\ndata \"octopusdeploy_feeds\" \"project_feed\" {\n  feed_type    = \"OctopusProject\"\n  partial_name = \"Octopus Server Releases\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"built_in_feed\" {\n  feed_type    = \"BuiltIn\"\n  ids          = null\n  partial_name = \"\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_git_credentials\" \"git\" {\n  name = \"matt\"\n  skip = 0\n  take = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"variable\" {\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"variable2\" {\n  partial_name = \"Test2\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_library_variable_sets\" \"variable3\" {\n  partial_name = \"Test3\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\n\ndata \"octopusdeploy_worker_pools\" \"worker_pool_docker\" {\n  ids          = null\n  partial_name = \"Docker\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_feeds\" \"feed_octopus_server_releases__built_in_\" {\n  feed_type    = \"OctopusProject\"\n  ids          = null\n  partial_name = \"Octopus Server Releases\"\n  skip         = 0\n  take         = 1\n  space_id = var.octopus_space_id\n  lifecycle {\n    postcondition {\n      error_message = \"Failed to resolve a feed called \\\"Octopus Server Releases (built-in)\\\". This resource must exist in the space before this Terraform configuration is applied.\"\n      condition     = length(self.feeds) != 0\n    }\n  }\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = [\n    data.octopusdeploy_library_variable_sets.variable.library_variable_sets[0].id,\n    data.octopusdeploy_library_variable_sets.variable2.library_variable_sets[0].id,\n    data.octopusdeploy_library_variable_sets.variable3.library_variable_sets[0].id\n  ]\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"deployment_process_project_one\" {\n  project_id = \"${octopusdeploy_project.project_1.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_project_one\" {\n  process_id = \"${octopusdeploy_process.deployment_process_project_one.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_project_one.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_project_one\" {\n  name                  = \"Deploy a Release\"\n  type                  = \"Octopus.DeployRelease\"\n  process_id            = \"${octopusdeploy_process.deployment_process_project_one.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"NotAcquired\",\n    feed_id = data.octopusdeploy_feeds.feed_octopus_server_releases__built_in_.feeds[0].id,\n    id = null,\n    package_id = data.octopusdeploy_projects.other.projects[0].id,\n    properties = null\n  }\n  slug                  = \"deploy-a-release\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  worker_pool_id        = data.octopusdeploy_worker_pools.worker_pool_docker.worker_pools[0].id\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.DeployRelease.DeploymentCondition\" = \"Always\"\n    \"Octopus.Action.DeployRelease.ProjectId\" = data.octopusdeploy_projects.other.projects[0].id\n    \"Octopus.Action.RunOnServer\" = \"true\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"excluded_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"Excluded\"\n  value    = \"PlainText\"\n}\n\nresource \"octopusdeploy_variable\" \"named_excluded_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"NamedExcluded\"\n  value    = \"PlainText\"\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"Test\"\n  value    = \"PlainText\"\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_variable\" \"feed_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"HelmFeed\"\n  value    = data.octopusdeploy_feeds.helm_feed.feeds[0].id\n}\n\nresource \"octopusdeploy_variable\" \"account_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"AwsAccount\"\n  value    = data.octopusdeploy_accounts.example.accounts[0].id\n}\n\nresource \"octopusdeploy_variable\" \"gitcred_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"GitCreds\"\n  value    = data.octopusdeploy_git_credentials.git.git_credentials[0].id\n}\n\nresource \"octopusdeploy_variable\" \"workerpool_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"WorkerPool\"\n  value    = data.octopusdeploy_worker_pools.workerpool_default.worker_pools[0].id\n}\n\nresource \"octopusdeploy_variable\" \"certificate_variable\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"Certificate\"\n  value    = data.octopusdeploy_certificates.example.certificates[0].id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.project_2.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  worker_pool_id        = data.octopusdeploy_worker_pools.worker_pool_docker.worker_pools[0].id\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n\nresource \"octopusdeploy_runbook\" \"runbook\" {\n  project_id         = octopusdeploy_project.project_1.id\n  name               = \"MyRunbook\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = []\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_runbook\" \"runbook2\" {\n  project_id         = octopusdeploy_project.project_1.id\n  name               = \"MyRunbook2\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = []\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_runbook\" \"myrunbook3\" {\n  project_id         = octopusdeploy_project.project_1.id\n  name               = \"MyRunbook3\"\n  description        = \"Test Runbook\"\n  multi_tenancy_mode = \"Untenanted\"\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n  retention_policy {\n    quantity_to_keep = 10\n  }\n  environment_scope           = \"Specified\"\n  environments                = []\n  default_guided_failure_mode = \"EnvironmentDefault\"\n  force_package_download      = false\n}\n\nresource \"octopusdeploy_process\" \"process_test_myrunbook3\" {\n  project_id = \"${octopusdeploy_project.project_1.id}\"\n  runbook_id = \"${octopusdeploy_runbook.myrunbook3.id}\"\n  depends_on = []\n}\n\nresource \"octopusdeploy_process_steps_order\" \"process_step_order_test_myrunbook3\" {\n  process_id = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  steps      = [\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_hello_world__using_powershell_.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_test.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_run_an_azure_script.id}\",\n    \"${octopusdeploy_process_step.process_step_test_myrunbook3_deploy_a_release.id}\"]\n}\n\nvariable \"project_myrunbook3_step_test_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named  from step Test in project MyRunbook3\"\n  default     = \"terraform\"\n}\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_test\" {\n  name                  = \"Test\"\n  type                  = \"Octopus.TerraformApply\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"Server\",\n    feed_id = \"${data.octopusdeploy_feeds.built_in_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"${var.project_myrunbook3_step_test_packageid}\",\n    properties = { SelectionMode = \"immediate\"\n    }\n  }\n  slug                  = \"test\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Terraform.AllowPluginDownloads\" = \"True\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Terraform.GoogleCloudAccount\" = \"False\"\n    \"Octopus.Action.GoogleCloud.ImpersonateServiceAccount\" = \"False\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Package\"\n    \"Octopus.Action.GoogleCloud.UseVMServiceAccount\" = \"True\"\n    \"Octopus.Action.Terraform.TemplateDirectory\" = \"blah\"\n    \"Octopus.Action.Terraform.AzureAccount\" = \"False\"\n    \"Octopus.Action.Terraform.ManagedAccount\" = \"None\"\n    \"Octopus.Action.Terraform.PlanJsonOutput\" = \"False\"\n    \"Octopus.Action.Terraform.RunAutomaticFileSubstitution\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_run_an_azure_script\" {\n  name                  = \"Run an Azure Script\"\n  type                  = \"Octopus.AzurePowerShell\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"run-an-azure-script\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Azure.AccountId\" = \"${data.octopusdeploy_accounts.azure.accounts[0].id}\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"OctopusUseBundledTooling\" = \"False\"\n  }\n}\n\nvariable \"project_myrunbook3_step_hello_world__using_powershell__package_package1_packageid\" {\n  type        = string\n  nullable    = false\n  sensitive   = false\n  description = \"The package ID for the package named package1 from step Hello world (using PowerShell) in project MyRunbook3\"\n  default     = \"package1\"\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_hello_world__using_powershell_\" {\n  name                  = \"Hello world (using PowerShell)\"\n  type                  = \"Octopus.Script\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  is_required           = true\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = {\n    package1 = {\n      acquisition_location = \"Server\",\n      feed_id = \"#{HelmFeed}\",\n      id = null,\n      package_id = \"${var.project_myrunbook3_step_hello_world__using_powershell__package_package1_packageid}\",\n      properties = {\n        Extract = \"True\",\n        Purpose = \"\",\n        SelectionMode = \"immediate\"\n      }\n    }\n  }\n  slug                  = \"hello-world-using-powershell\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.Script.ScriptBody\" = \"Write-Host 'Hello world, using PowerShell'\\n\\n#TODO: Experiment with steps of your own :)\\n\\nWrite-Host '[Learn more about the types of steps available in Octopus](https://oc.to/OnboardingAddStepsLearnMore)'\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.RunOnServer\" = \"True\"\n  }\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_test_myrunbook3_deploy_a_release\" {\n  name                  = \"Deploy a Release\"\n  type                  = \"Octopus.DeployRelease\"\n  process_id            = \"${octopusdeploy_process.process_test_myrunbook3.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  primary_package       = {\n    acquisition_location = \"NotAcquired\",\n    feed_id = \"${data.octopusdeploy_feeds.project_feed.feeds[0].id}\",\n    id = null,\n    package_id = \"${data.octopusdeploy_projects.other.projects[0].id}\",\n    properties = null\n  }\n  slug                  = \"deploy-a-release\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  worker_pool_id        = \"${data.octopusdeploy_worker_pools.worker_pool_docker.worker_pools[0].id}\"\n  properties            = {\n  }\n  execution_properties  = {\n    \"Octopus.Action.DeployRelease.ProjectId\" = \"${data.octopusdeploy_projects.other.projects[0].id}\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.DeployRelease.DeploymentCondition\" = \"Always\"\n  }\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle\" {\n  ids          = []\n  partial_name = \"Simple\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_channel\" \"channel1\" {\n  name        = \"Test 1\"\n  project_id  = octopusdeploy_project.project_1.id\n  description = \"Test channel\"\n  is_default  = true\n  lifecycle_id = data.octopusdeploy_lifecycles.lifecycle.lifecycles[0].id\n}\n\nresource \"octopusdeploy_channel\" \"channel2\" {\n  name        = \"Test 2\"\n  project_id  = octopusdeploy_project.project_2.id\n  description = \"Test channel\"\n  is_default  = true\n}\ndata \"octopusdeploy_accounts\" \"example\" {\n  account_type = \"AmazonWebServicesAccount\"\n  ids          = []\n  partial_name = \"AWS Account\"\n  skip         = 0\n  take         = 1\n}\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"tag1\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag_set\" \"tagset_tag2\" {\n  name        = \"tag2\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_c\" {\n  name        = \"c\"\n  color       = \"#333333\"\n  description = \"tag c\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag2.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_d\" {\n  name        = \"d\"\n  color       = \"#333333\"\n  description = \"tag d\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag2.id\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_ssh_key_account\" named \"account_ssh\" to manage SSH key accounts in Octopus Deploy with attributes: description set to \"A test account\" to specify the description of this SSH key account, name set to \"SSH\" to specify the name of this resource, environments set to null to indicate no associated environment IDs, tenant_tags set to an empty list to specify no tenant tags associated, tenants set to null to indicate no associated tenant IDs, tenanted_deployment_participation set to \"Untenanted\" to define the tenanted deployment mode as Untenanted, private_key_file set to \"unused\" (not described in schema), username set to \"admin\" to specify the username associated with this resource, and private_key_passphrase set to the contents of the file \"dummycert.txt\" (not described in schema)."},{"role":"assistant","content":"resource \"octopusdeploy_ssh_key_account\" \"account_ssh\" {\n  description                       = \"A test account\"\n  name                              = \"SSH\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  private_key_file                  = \"unused\"\n  username                          = \"admin\"\n  # Because of https://github.com/OctopusDeployLabs/terraform-provider-octopusdeploy/issues/343\n  private_key_passphrase            = file(\"dummycert.txt\")\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_policy\" named \"machinepolicy_testing\" to manage machine policies in Octopus Deploy with attributes: name set to \"Testing\" as the name of this resource, description set to \"test machine policy\" as the description of this machine policy, connection_connect_timeout set to 60000000000 nanoseconds as the connection timeout, connection_retry_count_limit set to 5 as the retry count limit, connection_retry_sleep_interval set to 1000000000 nanoseconds as the retry sleep interval, and connection_retry_time_limit set to 300000000000 nanoseconds as the retry time limit.\n\nDefine a machine_cleanup_policy block (max 1) with attributes: delete_machines_behavior set to \"DeleteUnavailableMachines\" and delete_machines_elapsed_timespan set to 1200000000000 nanoseconds.\n\nDefine a machine_connectivity_policy block (max 1) with attribute: machine_connectivity_behavior set to \"ExpectedToBeOnline\".\n\nDefine a machine_health_check_policy block (max 1) with attributes: health_check_cron_timezone set to \"UTC\", health_check_interval set to 600000000000 nanoseconds, and health_check_type set to \"RunScript\". Inside it, define a bash_health_check_policy block (min 1, max 1) with attributes: run_type set to \"Inline\" and script_body set to an empty string. Also define a powershell_health_check_policy block (min 1, max 1) with attributes: run_type set to \"Inline\" and script_body set to the provided PowerShell script checking free disk space.\n\nDefine a machine_update_policy block (max 1) with attributes: calamari_update_behavior set to \"UpdateOnDeployment\" describing how Calamari is updated, tentacle_update_behavior set to \"NeverUpdate\" describing how Tentacle machines are updated, and kubernetes_agent_update_behavior set to \"Update\" describing how Kubernetes agent machines are updated."},{"role":"assistant","content":"resource \"octopusdeploy_machine_policy\" \"machinepolicy_testing\" {\n  name                                               = \"Testing\"\n  description                                        = \"test machine policy\"\n  connection_connect_timeout                         = 60000000000\n  connection_retry_count_limit                       = 5\n  connection_retry_sleep_interval                    = 1000000000\n  connection_retry_time_limit                        = 300000000000\n\n  machine_cleanup_policy {\n    delete_machines_behavior         = \"DeleteUnavailableMachines\"\n    delete_machines_elapsed_timespan = 1200000000000\n  }\n\n  machine_connectivity_policy {\n    machine_connectivity_behavior = \"ExpectedToBeOnline\"\n  }\n\n  machine_health_check_policy {\n\n    bash_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"\"\n    }\n\n    powershell_health_check_policy {\n      run_type    = \"Inline\"\n      script_body = \"$freeDiskSpaceThreshold = 5GB\\r\\n\\r\\nTry {\\r\\n\\tGet-WmiObject win32_LogicalDisk -ErrorAction Stop  | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null)} |  % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\r\\n} Catch [System.Runtime.InteropServices.COMException] {\\r\\n\\tGet-WmiObject win32_Volume | ? { ($_.DriveType -eq 3) -and ($_.FreeSpace -ne $null) -and ($_.DriveLetter -ne $null)} | % { CheckDriveCapacity @{Name =$_.DriveLetter; FreeSpace=$_.FreeSpace} }\\r\\n\\tGet-WmiObject Win32_MappedLogicalDisk | ? { ($_.FreeSpace -ne $null) -and ($_.DeviceId -ne $null)} | % { CheckDriveCapacity @{Name =$_.DeviceId; FreeSpace=$_.FreeSpace} }\\t\\r\\n}\"\n    }\n\n    health_check_cron_timezone = \"UTC\"\n    health_check_interval      = 600000000000\n    health_check_type          = \"RunScript\"\n  }\n\n  machine_update_policy {\n    calamari_update_behavior = \"UpdateOnDeployment\"\n    tentacle_update_behavior = \"NeverUpdate\"\n    kubernetes_agent_update_behavior = \"Update\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_script_module\" named \"library_variable_set_test2\" to manage a script module with attributes: description set to \"The description of this script module.\" with value \"Test script module\", name set to \"The name of this resource.\" with value \"Test2\". Define a script block, which is a list containing one item with attributes: body set to \"The body of this script module.\" with value \"echo \\\"hi\\\"\", and syntax set to \"The syntax of the script. Valid types are `Bash`, `CSharp`, `FSharp`, `PowerShell`, or `Python`.\" with value \"PowerShell\"."},{"role":"assistant","content":"resource \"octopusdeploy_script_module\" \"library_variable_set_test2\" {\n  description = \"Test script module\"\n  name        = \"Test2\"\n\n  script {\n    body   = \"echo \\\"hi\\\"\"\n    syntax = \"PowerShell\"\n  }\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_artifactory_generic_feed\" named \"example\" to manage an Artifactory Generic feed in Octopus Deploy with attributes: feed_uri set to \"https://example.jfrog.io\" specifying the feed URI, password set to \"test-password\" as the password associated with this resource, name set to \"Artifactory\" as the name of this resource, username set to \"test-username\" as the username associated with this resource, repository set to \"repo\" specifying the repository, and layout_regex set to \"this is regex\" specifying the layout regex."},{"role":"assistant","content":"resource \"octopusdeploy_artifactory_generic_feed\" \"example\" {\n  feed_uri                       = \"https://example.jfrog.io\"\n  password                       = \"test-password\"\n  name                           = \"Artifactory\"\n  username                       = \"test-username\"\n  repository                     = \"repo\"\n  layout_regex                   = \"this is regex\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_tenant\" named \"tenant_team_a\" to manage tenants in Octopus Deploy with attributes: name set to \"Team A\" as the name of this resource, and description set to \"Test tenant\" as the description of this tenant.\n\nCreate four resources \"octopusdeploy_environment\" named \"development_environment\", \"test_environment\", \"production_environment\", and \"blah_environment\" to manage environments in Octopus Deploy each with attributes: allow_dynamic_infrastructure set to true, description set to \"A test environment\" as the description of this environment, name set respectively to \"Development\", \"Test\", \"Production\", and \"Blah\" as the name of this resource, and use_guided_failure set to false.\n\nCreate a resource \"octopusdeploy_azure_service_principal\" named \"account_azure\" to manage Azure service principal accounts in Octopus Deploy with attributes: description set to \"Azure Account\" as the description of this Azure service principal account, name set to \"Azure\" as the name of this resource, environments set to a list containing the ID of the \"test_environment\" environment as a list of environment IDs associated with this resource, tenants set to a list containing the ID of the \"tenant_team_a\" tenant as a list of tenant IDs associated with this resource, tenanted_deployment_participation set to \"Tenanted\" as the tenanted deployment mode of the resource, application_id set to \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\" as the application ID of this resource, password set to \"secretgoeshere\" as the password associated with this resource, subscription_id set to \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\" as the subscription ID of this resource, and tenant_id set to \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\" as the tenant ID of this resource."},{"role":"assistant","content":"resource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n}\n\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"blah_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Blah\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_azure\" {\n  description                       = \"Azure Account\"\n  name                              = \"Azure\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  tenants                           = [octopusdeploy_tenant.tenant_team_a.id]\n  tenanted_deployment_participation = \"Tenanted\"\n  application_id                    = \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\"\n  password                          = \"secretgoeshere\"\n  subscription_id                   = \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\"\n  tenant_id                         = \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by no specific lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to filter by no specific IDs, partial_name set to \"Test\" to filter project groups by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to set the default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project\" describing the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test\" as the project name, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to include no library variable sets. Define a versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to specify the versioning template. Define a connectivity_policy block with allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a data source \"octopusdeploy_deployment_targets\" named \"cloud\" to provide information about existing deployment targets with attributes: partial_name set to \"CloudRegion\" to filter deployment targets by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"scoped_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project_1 resource to associate the variable with the project, type set to \"String\" to specify the variable type, name set to \"test\" as the variable name, value set to \"test\" as the variable value. Define a scope block with tenant_tags set to [\"tag1/a\"] to scope the variable to tenant tags, and machines set to a list containing the ID of the first deployment target from the cloud data source to scope the variable to machines.\n\nCreate an output \"octopus_project_1\" with value set to the ID of the project_1 resource.\n\nCreate a resource \"octopusdeploy_project\" named \"project_2\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to set the default guided failure mode, default_to_skip_if_already_installed set to false to not skip deployment if already installed, description set to \"Test project 2\" describing the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test 2\" as the project name, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to include no library variable sets. Define a versioning_strategy block with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\" to specify the versioning template. Define a connectivity"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\ndata \"octopusdeploy_deployment_targets\" \"cloud\" {\n  partial_name = \"CloudRegion\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"test\"\n  value    = \"test\"\n  scope {\n    tenant_tags = [\"tag1/a\"]\n    machines = [data.octopusdeploy_deployment_targets.cloud.deployment_targets[0].id]\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_token_account\" named \"account_autopilot_service_account\" to manage a token account with attributes: description set to \"A test account\" to specify the description of this token account, name set to \"Token\" to specify the name of this resource, environments set to null for no associated environment IDs, tenant_tags set to an empty list for no tenant tags associated, tenants set to null for no associated tenant IDs, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode of the resource, and token set to \"secretgoeshere\" to specify the token of this resource."},{"role":"assistant","content":"resource \"octopusdeploy_token_account\" \"account_autopilot_service_account\" {\n  description                       = \"A test account\"\n  name                              = \"Token\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  token                             = \"secretgoeshere\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a tag set \"octopusdeploy_tag_set\" named \"type with space\" with description \"Test tagset\" and sort_order 0.\n\nCreate tags \"octopusdeploy_tag\" named \"a with space\", \"b\", \"excluded\", and \"ignorethis\" with color \"#333333\", descriptions \"tag a\", \"tag b\", \"excluded\", and \"ignore this\" respectively, sort_order 2, 3, 4, and 5, each associated with the tag set \"type with space\".\n\nCreate environments \"octopusdeploy_environment\" named \"Development\", \"Test\", and \"Production\" each with description \"A test environment\", allow_dynamic_infrastructure true, and use_guided_failure false.\n\nCreate an Azure service principal account \"octopusdeploy_azure_service_principal\" named \"Sales Account\" with application_id \"08a4a027-6f2a-4793-a0e5-e59a3c79189f\", password from sensitive variable \"account_sales_account\", subscription_id \"3b50dcf4-f74d-442e-93cb-301b13e1e2d5\", tenant_id \"3d13e379-e666-469e-ac38-ec6fd61c1166\", tenanted_deployment_participation \"Untenanted\", and no environments, tenant_tags, or tenants.\n\nCreate a sensitive string variable \"account_sales_account\" described as \"The Azure secret associated with the account Sales Account\".\n\nCreate an AWS account \"octopusdeploy_aws_account\" named \"AWS Account\" with access_key \"ABCDEFGHIJKLMNOPQRST\", secret_key \"secretgoeshere\", tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], no environments or tenants.\n\nCreate a GCP account \"octopusdeploy_gcp_account\" named \"Google\" with json_key \"secretgoeshere\", tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], no environments or tenants.\n\nCreate a username-password account \"octopusdeploy_username_password_account\" named \"UsernamePasswordAccount\" with username \"admin\", password \"secretgoeshere\", tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], no environments or tenants.\n\nCreate an SSH key account \"octopusdeploy_ssh_key_account\" named \"SSH\" with description \"A test account\", username \"admin\", private_key_file \"unused\", private_key_passphrase from file \"dummycert3.txt\", tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], no environments or tenants, depends on tag \"a with space\".\n\nCreate an SSH key account \"octopusdeploy_ssh_key_account\" named \"ec2 sydney\" with username \"ec2-user\", private_key_file and private_key_passphrase from sensitive variables \"account_ec2_sydney_cert\" and \"account_ec2_sydney\", tenanted_deployment_participation \"Untenanted\", no environments, tenant_tags, or tenants.\n\nCreate sensitive string variables \"account_ec2_sydney\" and \"account_ec2_sydney_cert\" described as \"The password associated with the certificate for account ec2 sydney\" and \"The certificate file for account ec2 sydney\" respectively.\n\nCreate an SSH connection deployment target \"octopusdeploy_ssh_connection_deployment_target\" named \"sshtarget\" with host \"3.25.215.87\", fingerprint \"d5:6b:a3:78:fa:fe:f5:ad:d4:79:4a:57:35:6a:32:ef\", roles [\"vm\"], dot_net_core_platform \"linux-x64\", machine_policy_id from default machine policy data source, environments [\"Development\"], tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], account_id from SSH key account \"ec2 sydney\", depends on tag \"a with space\".\n\nCreate a polling tentacle deployment target \"octopusdeploy_polling_tentacle_deployment_target\" named \"polling\" with tentacle_url \"poll://abcdefghijklmnopqrst/\", roles [\"vm\"], shell_name \"PowerShell\", shell_version \"5.1.22621.1\", health_status \"Healthy\", is_disabled false, machine_policy_id from default machine policy data source, environments [\"Development\"], tenanted_deployment_participation \"Tenanted\", tenant_tags [\"type with space/a with space\"], thumbprint \"1854A302E5D9EAC1CAA3DA1F5249F82C28BB2B86\", depends on tag \"a with space\".\n\nCreate a listening tentacle deployment target \"octopusdeploy_listening_tentacle_deployment_target\" named \"listening\" with tentacle_url \"https://tentacle/\", roles [\"vm\"], shell_name \"Unknown\", shell_version \"Unknown\", health_status \"Healthy\", is_disabled false, is_in_process false, machine_policy_id from"},{"role":"assistant","content":"resource \"octopusdeploy_azure_service_fabric_cluster_deployment_target\" \"target_service_fabric\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Service Fabric\"\n  roles                             = [\"cloud\"]\n  connection_endpoint               = \"http://endpoint\"\n  aad_client_credential_secret      = \"\"\n  aad_credential_type               = \"UserCredential\"\n  aad_user_credential_password      = \"${var.target_service_fabric}\"\n  aad_user_credential_username      = \"username\"\n  certificate_store_location        = \"\"\n  certificate_store_name            = \"\"\n  client_certificate_variable       = \"\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n  thumbprint                        = \"\"\n}\nvariable \"target_service_fabric\" {\n  type        = string\n  nullable    = true\n  sensitive   = true\n  description = \"The secret variable value associated with the target \\\"Service Fabric\\\"\"\n}\n\nresource \"octopusdeploy_offline_package_drop_deployment_target\" \"target_offline\" {\n  applications_directory            = \"c:\\\\temp\"\n  working_directory                 = \"c:\\\\temp\"\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"offline\"\n  roles                             = [\"offline\"]\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n}\nresource \"octopusdeploy_tenant\" \"tenant_team_a\" {\n  name        = \"Team A\"\n  description = \"Test tenant\"\n  tenant_tags = [\"type with space/a with space\", \"type with space/b\", \"type with space/ignorethis\"]\n  depends_on  = [octopusdeploy_tag.tag_a, octopusdeploy_tag.tag_b, octopusdeploy_tag.tag_ignore]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenanta_project\" {\n  environment_ids = [\n    octopusdeploy_environment.test_environment.id,\n    octopusdeploy_environment.development_environment.id,\n    octopusdeploy_environment.production_environment.id\n  ]\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id = octopusdeploy_tenant.tenant_team_a.id\n}\n\nresource \"octopusdeploy_tenant\" \"tenant_excluded\" {\n  name        = \"Excluded\"\n  description = \"Excluded tenant\"\n  tenant_tags = [\"type with space/excluded\"]\n  depends_on  = [octopusdeploy_tag.tag_excluded]\n}\n\nresource \"octopusdeploy_tenant_project\" \"tenantexcluded_project\" {\n  environment_ids = [\n    octopusdeploy_environment.test_environment.id,\n    octopusdeploy_environment.development_environment.id,\n    octopusdeploy_environment.production_environment.id\n  ]\n  project_id = octopusdeploy_project.deploy_frontend_project.id\n  tenant_id = octopusdeploy_tenant.tenant_excluded.id\n}\nresource \"octopusdeploy_polling_tentacle_deployment_target\" \"target_desktop_3e4k4r8\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"polling\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"poll://abcdefghijklmnopqrst/\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"PowerShell\"\n  shell_version                     = \"5.1.22621.1\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n\n  thumbprint = \"1854A302E5D9EAC1CAA3DA1F5249F82C28BB2B86\"\n}\nresource \"octopusdeploy_certificate\" \"certificate_kind_ca\" {\n  name                              = \"Test\"\n  certificate_data                  = file(\"dummycert.txt\")\n  password                          = \"Password01!\"\n  environments                      = []\n  notes                             = \"A test certificate\"\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenanted_deployment_participation = \"Tenanted\"\n  tenants                           = []\n  depends_on                        = [octopusdeploy_tag.tag_a]\n}\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\nresource \"octopusdeploy_azure_web_app_deployment_target\" \"target_web_app\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"Web App\"\n  roles                             = [\"cloud\"]\n  account_id                        = \"${octopusdeploy_azure_service_principal.account_sales_account.id}\"\n  resource_group_name               = \"mattc-webapp\"\n  web_app_name                      = \"mattc-webapp\"\n  health_status                     = \"Unhealthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n  thumbprint                        = \"\"\n  web_app_slot_name                 = \"slot1\"\n# This doesn't work for setting the worker pool\n#  endpoint {\n#    communication_style    = \"AzureWebApp\"\n#    default_worker_pool_id = octopusdeploy_static_worker_pool.workerpool_docker.id\n#  }\n\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_sales_account\" {\n  name                              = \"Sales Account\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  application_id                    = \"08a4a027-6f2a-4793-a0e5-e59a3c79189f\"\n  password                          = \"${var.account_sales_account}\"\n  subscription_id                   = \"3b50dcf4-f74d-442e-93cb-301b13e1e2d5\"\n  tenant_id                         = \"3d13e379-e666-469e-ac38-ec6fd61c1166\"\n}\nvariable \"account_sales_account\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The Azure secret associated with the account Sales Account\"\n}\nresource \"octopusdeploy_environment\" \"development_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Development\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"test_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Test\"\n  use_guided_failure           = false\n}\n\nresource \"octopusdeploy_environment\" \"production_environment\" {\n  allow_dynamic_infrastructure = true\n  description                  = \"A test environment\"\n  name                         = \"Production\"\n  use_guided_failure           = false\n}\nresource \"octopusdeploy_ssh_key_account\" \"account_ssh\" {\n  description                       = \"A test account\"\n  name                              = \"SSH\"\n  environments                      = null\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = null\n  private_key_file                  = \"unused\"\n  username                          = \"admin\"\n  # Because of https://github.com/OctopusDeployLabs/terraform-provider-octopusdeploy/issues/343\n  private_key_passphrase            = file(\"dummycert3.txt\")\n}\nresource \"octopusdeploy_listening_tentacle_deployment_target\" \"target_vm_listening_ngrok\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"listening\"\n  roles                             = [\"vm\"]\n  tentacle_url                      = \"https://tentacle/\"\n  thumbprint                        = \"55E05FD1B0F76E60F6DA103988056CE695685FD1\"\n  is_disabled                       = false\n  is_in_process                     = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n\n  tentacle_version_details {\n  }\n}\nresource \"octopusdeploy_azure_service_principal\" \"account_azure\" {\n  description                       = \"Azure Account\"\n  name                              = \"Azure\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenanted_deployment_participation = \"Tenanted\"\n  application_id                    = \"2eb8bd13-661e-489c-beb9-4103efb9dbdd\"\n  password                          = \"secretgoeshere\"\n  subscription_id                   = \"95bf77d2-64b1-4ed2-9de1-b5451e3881f5\"\n  tenant_id                         = \"18eb006b-c3c8-4a72-93cd-fe4b293f82ee\"\n}\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_worker_pools\" \"workerpool_default\" {\n  name = \"Default Worker Pool\"\n  ids  = null\n  skip = 0\n  take = 1\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Tenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  worker_pool_id                     = data.octopusdeploy_worker_pools.workerpool_default.worker_pools[0].id\n  package_requirement   = \"LetOctopusDecide\"\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = [\"type with space/a with space\"]\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n  depends_on = [octopusdeploy_tag.tag_a]\n}\nresource \"octopusdeploy_ssh_key_account\" \"account_ec2_sydney\" {\n  name                              = \"ec2 sydney\"\n  description                       = \"\"\n  environments                      = null\n  tenant_tags                       = []\n  tenants                           = null\n  tenanted_deployment_participation = \"Untenanted\"\n  private_key_file                  = \"${var.account_ec2_sydney_cert}\"\n  username                          = \"ec2-user\"\n  private_key_passphrase            = \"${var.account_ec2_sydney}\"\n}\nvariable \"account_ec2_sydney\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The password associated with the certificate for account ec2 sydney\"\n}\nvariable \"account_ec2_sydney_cert\" {\n  type        = string\n  nullable    = false\n  sensitive   = true\n  description = \"The certificate file for account ec2 sydney\"\n}\n\nresource \"octopusdeploy_ssh_connection_deployment_target\" \"target_3_25_215_87\" {\n  account_id                        = \"${octopusdeploy_ssh_key_account.account_ec2_sydney.id}\"\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  fingerprint                       = \"d5:6b:a3:78:fa:fe:f5:ad:d4:79:4a:57:35:6a:32:ef\"\n  host                              = \"3.25.215.87\"\n  name                              = \"sshtarget\"\n  roles                             = [\"vm\"]\n  dot_net_core_platform             = \"linux-x64\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n}\nresource \"octopusdeploy_gcp_account\" \"account_google\" {\n  description                       = \"A test account\"\n  name                              = \"Google\"\n  environments                      = null\n  tenants                           = null\n  json_key                          = \"secretgoeshere\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n}\nresource \"octopusdeploy_aws_account\" \"account_aws_account\" {\n  name                              = \"AWS Account\"\n  description                       = \"\"\n  environments                      = null\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = null\n  tenanted_deployment_participation = \"Tenanted\"\n  access_key                        = \"ABCDEFGHIJKLMNOPQRST\"\n  secret_key                        = \"secretgoeshere\"\n}\n\nresource \"octopusdeploy_tag_set\" \"tagset_tag1\" {\n  name        = \"type with space\"\n  description = \"Test tagset\"\n  sort_order  = 0\n}\n\nresource \"octopusdeploy_tag\" \"tag_a\" {\n  name        = \"a with space\"\n  color       = \"#333333\"\n  description = \"tag a\"\n  sort_order  = 2\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_b\" {\n  name        = \"b\"\n  color       = \"#333333\"\n  description = \"tag b\"\n  sort_order  = 3\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_excluded\" {\n  name        = \"excluded\"\n  color       = \"#333333\"\n  description = \"excluded\"\n  sort_order  = 4\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\n\nresource \"octopusdeploy_tag\" \"tag_ignore\" {\n  name        = \"ignorethis\"\n  color       = \"#333333\"\n  description = \"ignore this\"\n  sort_order  = 5\n  tag_set_id = octopusdeploy_tag_set.tagset_tag1.id\n}\nresource \"octopusdeploy_username_password_account\" \"account_gke\" {\n  description                       = \"A test account\"\n  name                              = \"UsernamePasswordAccount\"\n  environments                      = null\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenanted_deployment_participation = \"Tenanted\"\n  tenants                           = null\n  username                          = \"admin\"\n  password                          = \"secretgoeshere\"\n}\ndata \"octopusdeploy_machine_policies\" \"default_machine_policy\" {\n  ids          = null\n  partial_name = \"Default Machine Policy\"\n  skip         = 0\n  take         = 1\n}\n\nresource octopusdeploy_kubernetes_cluster_deployment_target test_eks {\n  cluster_url                       = \"https://cluster\"\n  environments                      = [octopusdeploy_environment.test_environment.id]\n  name                              = \"Test\"\n  roles                             = [\"eks\"]\n  cluster_certificate               = \"\"\n  cluster_certificate_path          = \"/var/run/secrets/kubernetes.io/serviceaccount/ca.crt\"\n  machine_policy_id                 = data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id\n  namespace                         = \"\"\n  skip_tls_verification             = true\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n  thumbprint                        = \"\"\n  uri                               = \"\"\n\n  container {\n    feed_id = \"\"\n    image   = \"\"\n  }\n\n  endpoint {\n    communication_style    = \"Kubernetes\"\n  }\n\n  pod_authentication {\n    token_path = \"/var/run/secrets/kubernetes.io/serviceaccount/token\"\n  }\n}\nresource \"octopusdeploy_token_account\" \"account_autopilot_service_account\" {\n  description                       = \"A test account\"\n  name                              = \"Token\"\n  environments                      = null\n  tenants                           = null\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  token                             = \"secretgoeshere\"\n}\n\nresource \"octopusdeploy_cloud_region_deployment_target\" \"target_region1\" {\n  environments                      = [\"${octopusdeploy_environment.development_environment.id}\"]\n  name                              = \"cloud\"\n  roles                             = [\"cloud\"]\n  default_worker_pool_id            = \"\"\n  health_status                     = \"Healthy\"\n  is_disabled                       = false\n  machine_policy_id                 = \"${data.octopusdeploy_machine_policies.default_machine_policy.machine_policies[0].id}\"\n  shell_name                        = \"Unknown\"\n  shell_version                     = \"Unknown\"\n  tenanted_deployment_participation = \"Tenanted\"\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenants                           = []\n  thumbprint                        = \"\"\n}\nresource \"octopusdeploy_azure_subscription_account\" \"account_subscription\" {\n  description                       = \"A test account\"\n  name                              = \"Subscription\"\n  environments                      = null\n  tenants                           = null\n  depends_on                        = [octopusdeploy_tag.tag_a]\n  tenant_tags                       = [\"type with space/a with space\"]\n  tenanted_deployment_participation = \"Tenanted\"\n  storage_endpoint_suffix           = \"storage_endpoint_suffix\"\n  subscription_id                   = \"fde6a0ae-a1d4-40ae-91de-88f4ed898c03\"\n  azure_environment                 = \"AzureCloud\"\n  management_endpoint               = \"management_endpoint\"\n  certificate                       = file(\"dummycert2.txt\")\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_docker_container_registry\" named \"feed_docker\" to manage a Docker Container Registry in Octopus Deploy with attributes: name set to \"Docker\" as the name of this resource, password set to \"password\" as the password associated with this resource, username set to \"username\" as the username associated with this resource, api_version set to \"v1\", feed_uri set to \"https://index.docker.io\", and package_acquisition_location_options set to [\"ExecutionTarget\", \"NotAcquired\"].\n\nCreate a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage a project group in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"Test Description\" as the description of this project group.\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the id of the project resource \"deploy_frontend_project\", type set to \"String\" as the type of variable represented by this resource, name set to \"Test\" as the name of this resource, and value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"EnvironmentDefault\" as the default guided failure mode, default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the id of the lifecycle from the data source \"lifecycle_default_lifecycle\", name set to \"Test\" as the name of this resource, project_group_id set to the id of the project group resource \"project_group_test\", tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode, space_id set to the variable \"octopus_space_id\", included_library_variable_sets set to an empty list, versioning_strategy with template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\", and connectivity_policy with allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\".\n\nCreate a resource \"octopusdeploy_process\" named \"test\" to manage Runbook and Deployment Processes in Octopus Deploy with attribute: project_id set to the id of the project resource \"deploy_frontend_project\".\n\nCreate a resource \"octopusdeploy_process_steps_order\" named \"test\" to manage order of Steps of a Runbook or Deployment Process in Octopus Deploy with attributes: process_id set to the id of the process resource \"test\", and steps set to a list containing the id of the process step resource \"process_step_get_mysql_host\".\n\nCreate a resource \"octopusdeploy_process_step\" named \"process_step_get_mysql_host\" to manage a single step of a Runbook or Deployment Process in Octopus Deploy with attributes: name set to \"Get MySQL Host\" as the name of this resource, type set to \"Octopus.KubernetesRunScript\" as the execution type of the step, process_id set to the id of the process resource \"test\", channels set to null as a set of channels associated with this step, condition set to \"Success\" indicating when to run the step, environments set to null as a set of environments within which this step will run, excluded_environments set to null as a set of environments that this step will be skipped in, package_requirement set to \"LetOctopusDecide\" indicating whether to run this step before or after package acquisition, packages set to a map with key \"package1\" containing acquisition_location set to \"ExecutionTarget\", feed_id set to the id of the docker container registry resource \"feed_docker\", id set to null, package_id set to \"package1\", and properties set to a map with Extract set to \"False\", Purpose set to \"\", and SelectionMode set to \"immediate\", slug set to \"get-mysql-host\" as the human-readable unique identifier for the step, start_trigger set to \"StartAfterPrevious\" indicating to run this step"},{"role":"assistant","content":"resource \"octopusdeploy_docker_container_registry\" \"feed_docker\" {\n  name                                 = \"Docker\"\n  password                             = \"password\"\n  username                             = \"username\"\n  api_version                          = \"v1\"\n  feed_uri                             = \"https://index.docker.io\"\n  package_acquisition_location_options = [\"ExecutionTarget\", \"NotAcquired\"]\n}\n\nresource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_process\" \"test\" {\n  project_id = \"${octopusdeploy_project.deploy_frontend_project.id}\"\n  depends_on = []\n}\nresource \"octopusdeploy_process_steps_order\" \"test\" {\n  process_id = \"${octopusdeploy_process.test.id}\"\n  steps      = [\"${octopusdeploy_process_step.process_step_get_mysql_host.id}\"]\n}\n\nresource \"octopusdeploy_process_step\" \"process_step_get_mysql_host\" {\n  name                  = \"Get MySQL Host\"\n  type                  = \"Octopus.KubernetesRunScript\"\n  process_id            = \"${octopusdeploy_process.test.id}\"\n  channels              = null\n  condition             = \"Success\"\n  environments          = null\n  excluded_environments = null\n  package_requirement   = \"LetOctopusDecide\"\n  packages              = { package1 = { acquisition_location = \"ExecutionTarget\", feed_id = \"${octopusdeploy_docker_container_registry.feed_docker.id}\", id = null, package_id = \"package1\", properties = { Extract = \"False\", Purpose = \"\", SelectionMode = \"immediate\" } } }\n  slug                  = \"get-mysql-host\"\n  start_trigger         = \"StartAfterPrevious\"\n  tenant_tags           = null\n  execution_properties  = {\n    \"Octopus.Action.Script.Syntax\" = \"PowerShell\"\n    \"Octopus.Action.Script.ScriptBody\" = \"echo \\\"hi\\\"\"\n    \"Octopus.Action.RunOnServer\" = \"true\"\n    \"Octopus.Action.Script.ScriptSource\" = \"Inline\"\n  }\n  properties            = {\n    \"Octopus.Action.TargetRoles\" = \"eks\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_machine_proxy\" named \"machineproxy\" to manage machine proxies in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, host set to \"localhost\" as the DNS hostname of the proxy server, username set to \"admin\" as the username of the proxy server, password set to \"password\" as the password of the proxy server, and port set to 100 as the port number for the proxy server."},{"role":"assistant","content":"resource \"octopusdeploy_machine_proxy\" \"machineproxy\" {\n  name        = \"Test\"\n  host = \"localhost\"\n  username = \"admin\"\n  password = \"password\"\n  port = 100\n}\n\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null to filter by lifecycle IDs, partial_name set to \"Default Lifecycle\" to filter lifecycles by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_project_groups\" named \"project_group\" to provide information about existing project groups with attributes: ids set to null to filter by IDs, partial_name set to \"Test\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a data source \"octopusdeploy_kubernetes_cluster_deployment_targets\" named \"test\" to provide information about existing Kubernetes cluster deployment targets with attributes: environments set to an empty list to filter by environment IDs, ids set to an empty list to filter by IDs, partial_name set to \"Test\" to filter by partial name, name set to \"Test\" to filter by name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate data sources \"octopusdeploy_deployment_targets\" named \"ssh\", \"polling\", \"listening\", \"offline\", \"service_facbric\", \"webapp\", and \"cloud\" to provide information about existing deployment targets with attributes: partial_name set respectively to \"Ssh\", \"Polling\", \"Listening\", \"Offline\", \"ServiceFabric\", \"WebApp\", and \"Cloud\" to filter by partial name, skip set to 0 to specify the number of items to skip in the response, and take set to 1 to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_project\" named \"project_1\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip if already installed, description set to \"Test project\" to describe the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test\" to name the project, project_group_id set to the ID of the project group from the project_group data source, tenanted_deployment_participation set to \"Untenanted\" to specify the tenanted deployment mode, included_library_variable_sets set to an empty list to specify included library variable set IDs, versioning_strategy block with template attribute set to a version template string, and connectivity_policy block with attributes: allow_deployments_to_no_targets set to false to disallow deployments to no targets, exclude_unhealthy_targets set to false to not exclude unhealthy targets, and skip_machine_behavior set to \"SkipUnavailableMachines\" to specify the skip machine behavior.\n\nCreate a resource \"octopusdeploy_variable\" named \"scoped_var\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of project_1 to associate the variable with the project, type set to \"String\" to specify the variable type, name set to \"test\" to name the variable, value set to \"test\" to assign the variable value, and scope block with machines attribute set to a list of machine IDs from various deployment target data sources to scope the variable to those machines.\n\nCreate an output \"octopus_project_1\" with value set to the ID of the project_1 resource.\n\nCreate a resource \"octopusdeploy_project\" named \"project_2\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false to disable automatic release creation, default_guided_failure_mode set to \"EnvironmentDefault\" to specify the default guided failure mode, default_to_skip_if_already_installed set to false to not skip if already installed, description set to \"Test project 2\" to describe the project, discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_disabled set to false to enable the project, is_discrete_channel_release set to false to not treat releases of different channels as separate deployment dimensions, is_version_controlled set to false to disable version control, lifecycle_id set to the ID of the lifecycle from the lifecycle_default_lifecycle data source, name set to \"Test 2\" to name the project, project_group_id set"},{"role":"assistant","content":"data \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_project_groups\" \"project_group\" {\n  ids          = null\n  partial_name = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_kubernetes_cluster_deployment_targets\" \"test\" {\n  environments = []\n  ids          = []\n  partial_name = \"Test\"\n  name         = \"Test\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"ssh\" {\n  partial_name = \"Ssh\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"polling\" {\n  partial_name = \"Polling\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"listening\" {\n  partial_name = \"Listening\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"offline\" {\n  partial_name = \"Offline\"\n  skip         = 0\n  take         = 1\n}\n\n# data \"octopusdeploy_deployment_targets\" \"azure\" {\n#   partial_name = \"Azure\"\n#   skip         = 0\n#   take         = 1\n# }\n\ndata \"octopusdeploy_deployment_targets\" \"service_facbric\" {\n  partial_name = \"ServiceFabric\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"webapp\" {\n  partial_name = \"WebApp\"\n  skip         = 0\n  take         = 1\n}\n\ndata \"octopusdeploy_deployment_targets\" \"cloud\" {\n  partial_name = \"Cloud\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_project\" \"project_1\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n\nresource \"octopusdeploy_variable\" \"scoped_var\" {\n  owner_id = octopusdeploy_project.project_1.id\n  type     = \"String\"\n  name     = \"test\"\n  value    = \"test\"\n  scope {\n    machines = [\n      data.octopusdeploy_kubernetes_cluster_deployment_targets.test.kubernetes_cluster_deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.cloud.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.ssh.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.polling.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.listening.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.offline.deployment_targets[0].id,\n      #data.octopusdeploy_deployment_targets.azure.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.service_facbric.deployment_targets[0].id,\n      data.octopusdeploy_deployment_targets.webapp.deployment_targets[0].id,\n    ]\n  }\n}\n\noutput \"octopus_project_1\" {\n  value = octopusdeploy_project.project_1.id\n}\n\nresource \"octopusdeploy_project\" \"project_2\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"EnvironmentDefault\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project 2\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test 2\"\n  project_group_id                     = data.octopusdeploy_project_groups.project_group.project_groups[0].id\n  tenanted_deployment_participation    = \"Untenanted\"\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_github_repository_feed\" named \"example\" to manage a GitHub repository feed in Octopus Deploy with attributes: download_attempts set to 1 to specify the number of times a deployment should attempt to download a package from this feed before failing, download_retry_backoff_seconds set to 30 to specify the number of seconds to apply as a linear back off between download attempts, feed_uri set to \"https://api.github.com\" as the URI of the feed, password set to \"test-password\" as the password associated with this resource, name set to \"Github\" as the name of this resource, and username set to \"test-username\" as the username associated with this resource."},{"role":"assistant","content":"resource \"octopusdeploy_github_repository_feed\" \"example\" {\n  download_attempts              = 1\n  download_retry_backoff_seconds = 30\n  feed_uri                       = \"https://api.github.com\"\n  password                       = \"test-password\"\n  name                           = \"Github\"\n  username                       = \"test-username\"\n}\n"}]}
{"messages":[{"role":"system","content":"You are an expert in generating Octopus Deploy Terraform configurations."},{"role":"user","content":"Create a resource \"octopusdeploy_project_group\" named \"project_group_test\" to manage project groups in Octopus Deploy with attributes: name set to \"Test\" as the name of this resource, and description set to \"The description of this project group.\" with value \"Test Description\".\n\nCreate a data source \"octopusdeploy_lifecycles\" named \"lifecycle_default_lifecycle\" to provide information about existing lifecycles with attributes: ids set to null as a list of lifecycle IDs to filter by, partial_name set to \"Default Lifecycle\" as a partial name to filter lifecycles by, skip set to 0 as a filter to specify the number of items to skip in the response, and take set to 1 as a filter to specify the number of items to take in the response.\n\nCreate a resource \"octopusdeploy_variable\" named \"string_variable\" to manage variables in Octopus Deploy with attributes: owner_id set to the ID of the project resource \"deploy_frontend_project\", type set to \"String\" as the type of variable represented by this resource, name set to \"Test\" as the name of this resource, and value set to \"PlainText\".\n\nCreate a resource \"octopusdeploy_project\" named \"deploy_frontend_project\" to manage projects in Octopus Deploy with attributes: auto_create_release set to false, default_guided_failure_mode set to \"On\", default_to_skip_if_already_installed set to false, description set to \"Test project\" as the description of this project, discrete_channel_release set to false to treat releases of different channels to the same environment as a separate deployment dimension, is_disabled set to false, is_discrete_channel_release set to false, is_version_controlled set to false, lifecycle_id set to the ID of the first lifecycle from the data source \"lifecycle_default_lifecycle\" as the lifecycle ID associated with this project, name set to \"Test\" as the name of this resource, project_group_id set to the ID of the project group resource \"project_group_test\" as the project group ID associated with this project, tenanted_deployment_participation set to \"Untenanted\" as the tenanted deployment mode of the resource, space_id set to the variable \"octopus_space_id\" as the space ID associated with this project, and included_library_variable_sets set to an empty list as the list of included library variable set IDs.\n\nInclude a nested block \"versioning_strategy\" with attribute template set to \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\".\n\nInclude a nested block \"connectivity_policy\" with attributes: allow_deployments_to_no_targets set to false, exclude_unhealthy_targets set to false, and skip_machine_behavior set to \"SkipUnavailableMachines\"."},{"role":"assistant","content":"resource \"octopusdeploy_project_group\" \"project_group_test\" {\n  name        = \"Test\"\n  description = \"Test Description\"\n}\n\ndata \"octopusdeploy_lifecycles\" \"lifecycle_default_lifecycle\" {\n  ids          = null\n  partial_name = \"Default Lifecycle\"\n  skip         = 0\n  take         = 1\n}\n\nresource \"octopusdeploy_variable\" \"string_variable\" {\n  owner_id  = octopusdeploy_project.deploy_frontend_project.id\n  type      = \"String\"\n  name      = \"Test\"\n  value     = \"PlainText\"\n}\n\nresource \"octopusdeploy_project\" \"deploy_frontend_project\" {\n  auto_create_release                  = false\n  default_guided_failure_mode          = \"On\"\n  default_to_skip_if_already_installed = false\n  description                          = \"Test project\"\n  discrete_channel_release             = false\n  is_disabled                          = false\n  is_discrete_channel_release          = false\n  is_version_controlled                = false\n  lifecycle_id                         = data.octopusdeploy_lifecycles.lifecycle_default_lifecycle.lifecycles[0].id\n  name                                 = \"Test\"\n  project_group_id                     = octopusdeploy_project_group.project_group_test.id\n  tenanted_deployment_participation    = \"Untenanted\"\n  space_id                             = var.octopus_space_id\n  included_library_variable_sets       = []\n  versioning_strategy {\n    template = \"#{Octopus.Version.LastMajor}.#{Octopus.Version.LastMinor}.#{Octopus.Version.LastPatch}.#{Octopus.Version.NextRevision}\"\n  }\n\n  connectivity_policy {\n    allow_deployments_to_no_targets = false\n    exclude_unhealthy_targets       = false\n    skip_machine_behavior           = \"SkipUnavailableMachines\"\n  }\n}"}]}
